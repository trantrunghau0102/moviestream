moviestream
├── 1.frontend
│   ├── ###.local-test
│   ├── Dockerfile
│   ├── README.md
│   ├── appspec.yml
│   ├── build
│   ├── buildspec.yml
│   ├── docker-compose.yml
│   ├── draft
│   ├── git_push.sh
│   ├── nginx.conf
│   ├── node_modules
│   ├── package-lock.json
│   ├── package.json
│   ├── postcss.config.js
│   ├── public
│   ├── run_local.sh
│   ├── service.json
│   ├── src
│   ├── tailwind.config.js
│   └── taskdef.json
├── 2.backend
│   ├── Dockerfile
│   ├── README.md
│   ├── chunk.mp4
│   ├── dist
│   ├── git_push.sh
│   ├── migrations
│   ├── node_modules
│   ├── package-lock.json
│   ├── package.json
│   ├── scripts
│   ├── src
│   ├── taskdef.json
│   ├── tsconfig.json
│   └── uploads
├── 3.local-test
│   ├── docker-compose.yml
│   ├── mongo-init.js
│   └── sample-data
├── 4.tf-infras
│   ├── backend
│   ├── environments
│   ├── modules
│   └── terraform.tfstate
└── 5.export
    ├── exported
    ├── md_extractor.py
    └── run_extract.sh

21 directories, 28 files
moviestream/1.frontend/src
├── App.css
├── App.js
├── App.test.js
├── components
│   ├── ErrorBoundary.js
│   ├── LoadingSpinner.js
│   ├── MovieCard.js
│   └── Navbar.js
├── config
│   └── aws.js
├── const
├── hooks
│   ├── useMovie.js
│   ├── useMovies.js
│   └── useVideoPlayer.js
├── index.css
├── index.js
├── logo.svg
├── pages
│   ├── HomePage.js
│   ├── MovieDetail.js
│   └── WatchMovie.js
├── reportWebVitals.js
├── services
│   └── api.js
└── setupTests.js

5 directories, 21 files
moviestream/2.backend/src
├── app.ts
├── config
│   ├── database.ts
│   └── environment.ts
├── controllers
│   ├── movie.controller.ts
│   └── stream.controller.ts
├── middlewares
│   └── error.middleware.ts
├── models
│   └── movie.model.ts
├── routes
│   └── movie.routes.ts
├── services
│   ├── interfaces.ts
│   ├── s3.service.ts
│   └── storage.service.ts
└── utils
    ├── apiError.ts
    └── asyncHandler.ts

7 directories, 13 files
moviestream/3.local-test
├── docker-compose.yml
├── mongo-init.js
└── sample-data
    ├── README.md
    └── videos
        ├── city-life.mp4
        ├── mountain-scene.mp4
        └── ocean-view.mp4

2 directories, 6 files
moviestream/4.tf-infras
├── backend
│   ├── main.tf
│   ├── terraform.tfstate
│   ├── terraform.tfstate.backup
│   ├── terraform.tfvars
│   └── variables.tf
├── environments
│   └── dev
│       ├── main.tf
│       ├── outputs.tf
│       ├── terraform.tfvars
│       └── variables.tf
├── modules
│   ├── ecr
│   │   ├── main.tf
│   │   ├── outputs.tf
│   │   └── variables.tf
│   ├── ecs
│   │   ├── main.tf
│   │   ├── outputs.tf
│   │   ├── variables.tf
│   │   └── versions.tf
│   ├── mongodb
│   │   ├── main.tf
│   │   ├── outputs.tf
│   │   └── variables.tf
│   ├── network
│   │   ├── main.tf
│   │   ├── outputs.tf
│   │   └── variables.tf
│   ├── pipeline
│   │   ├── main.tf
│   │   ├── outputs.tf
│   │   └── variables.tf
│   ├── repositories
│   │   ├── main.tf
│   │   ├── outputs.tf
│   │   └── variables.tf
│   └── resource-groups
│       ├── main.tf
│       ├── outputs.tf
│       └── variables.tf
└── terraform.tfstate

11 directories, 32 files
# Files Concatenation Report

Generated on: 2024-12-09 09:22:52

Source directory: /home/tthau/PROJECT/moviestream/1.frontend
File types: All supported types

---

## Table of Contents

- [###.local-test/docker-compose.yml](####.local-test-docker-compose.yml)
- [###.local-test/mongo-init.js](####.local-test-mongo-init.js)
- [###.local-test/sample-data/README.md](####.local-test-sample-data-README.md)
- [.env](#.env)
- [README.md](#README.md)
- [appspec.yml](#appspec.yml)
- [buildspec.yml](#buildspec.yml)
- [docker-compose.yml](#docker-compose.yml)
- [git_push.sh](#git_push.sh)
- [nginx.conf](#nginx.conf)
- [package.json](#package.json)
- [postcss.config.js](#postcss.config.js)
- [public/index.html](#public-index.html)
- [public/manifest.json](#public-manifest.json)
- [public/robots.txt](#public-robots.txt)
- [run_local.sh](#run_local.sh)
- [service.json](#service.json)
- [src/App.css](#src-App.css)
- [src/App.js](#src-App.js)
- [src/App.test.js](#src-App.test.js)
- [src/components/ErrorBoundary.js](#src-components-ErrorBoundary.js)
- [src/components/LoadingSpinner.js](#src-components-LoadingSpinner.js)
- [src/components/MovieCard.js](#src-components-MovieCard.js)
- [src/components/Navbar.js](#src-components-Navbar.js)
- [src/config/aws.js](#src-config-aws.js)
- [src/hooks/useMovie.js](#src-hooks-useMovie.js)
- [src/hooks/useMovies.js](#src-hooks-useMovies.js)
- [src/hooks/useVideoPlayer.js](#src-hooks-useVideoPlayer.js)
- [src/index.css](#src-index.css)
- [src/index.js](#src-index.js)
- [src/pages/HomePage.js](#src-pages-HomePage.js)
- [src/pages/MovieDetail.js](#src-pages-MovieDetail.js)
- [src/pages/WatchMovie.js](#src-pages-WatchMovie.js)
- [src/reportWebVitals.js](#src-reportWebVitals.js)
- [src/services/api.js](#src-services-api.js)
- [src/setupTests.js](#src-setupTests.js)
- [tailwind.config.js](#tailwind.config.js)
- [taskdef.json](#taskdef.json)

---

## <a id='###.local-test-docker-compose.yml'></a>File: ###.local-test/docker-compose.yml
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/###.local-test/docker-compose.yml`

```yaml
version: '3.8'

services:
  frontend:
    build:
      context: ../1.frontend
      dockerfile: Dockerfile
    container_name: mvs-frontend
    ports:
      - "8080:80"
    environment:
      - REACT_APP_API_URL=http://localhost:3000/api
    depends_on:
      - backend
    networks:
      - mvs-network
    restart: unless-stopped

  backend:
    build:
      context: ../2.backend
      dockerfile: Dockerfile
    container_name: mvs-backend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - MONGODB_LOCAL_URI=mongodb://mongodb:27017/movie-streaming
      - LOCAL_STORAGE_PATH=/app/uploads
      - UPLOAD_MAX_FILE_SIZE=100000000
    volumes:
      - ./sample-data:/app/uploads
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - mvs-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:6
    container_name: mvs-mongodb
    environment:
      - MONGO_DATA_DIR=/data/db
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - mvs-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: unless-stopped

networks:
  mvs-network:
    name: mvs-network
    driver: bridge

volumes:
  mongodb_data:
    name: mvs-mongodb-data

```

---

## <a id='###.local-test-mongo-init.js'></a>File: ###.local-test/mongo-init.js
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/###.local-test/mongo-init.js`

```javascript
// Chuyển sang database movie-streaming
db = db.getSiblingDB('movie-streaming');

// Xóa dữ liệu cũ nếu có
db.movies.drop();

// Tạo indexes cho hiệu năng tốt hơn
db.movies.createIndex({ "title": "text" });
db.movies.createIndex({ "createdAt": -1 });
db.movies.createIndex({ "views": -1 });
db.movies.createIndex({ "rating": -1 });

// Mảng chứa dữ liệu mẫu
const sampleMovies = [
    {
        title: "Ocean View",
        originalTitle: "Ocean View (2024)",
        description: "Khám phá vẻ đẹp kỳ diệu của đại dương với những cảnh quay tuyệt đẹp về san hô và sinh vật biển.",
        videoUrl: "videos/ocean-view.mp4",
        duration: 45,
        thumbnail: "https://via.placeholder.com/300x450?text=Ocean+View",
        genre: ["Nature", "Documentary"],
        rating: 4.5,
        year: 2024,
        country: "Vietnam",
        director: "Nguyen Van A",
        cast: [
            {
                name: "Nature",
                character: "Herself",
                image: "https://via.placeholder.com/150?text=Nature"
            }
        ],
        status: "Released",
        views: 1200,
        releaseDate: "2024-01-15",
        createdAt: new Date(),
        updatedAt: new Date()
    },
    {
        title: "Mountain Adventure",
        originalTitle: "Mountain Adventure (2024)",
        description: "Hành trình chinh phục đỉnh núi cao với những thử thách và khung cảnh ngoạn mục.",
        videoUrl: "videos/mountain-scene.mp4",
        duration: 55,
        thumbnail: "https://via.placeholder.com/300x450?text=Mountain+Adventure",
        genre: ["Adventure", "Documentary"],
        rating: 4.8,
        year: 2024,
        country: "Vietnam",
        director: "Nguyen Van B",
        cast: [
            {
                name: "Mountain Explorer",
                character: "Guide",
                image: "https://via.placeholder.com/150?text=Explorer"
            }
        ],
        status: "Released",
        views: 800,
        releaseDate: "2024-02-01",
        createdAt: new Date(),
        updatedAt: new Date()
    }
];

// Insert dữ liệu mẫu
try {
    const result = db.movies.insertMany(sampleMovies);
    print('Inserted sample movies successfully:', result);
} catch (error) {
    print('Error inserting sample movies:', error);
}
```

---

## <a id='###.local-test-sample-data-README.md'></a>File: ###.local-test/sample-data/README.md
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/###.local-test/sample-data/README.md`

```markdown
# Sample Data Directory Structure

```
sample-data/
├── videos/
│   ├── ocean-view.mp4        # Video mẫu 1 - cảnh biển
│   ├── mountain-scene.mp4    # Video mẫu 2 - cảnh núi
│   └── city-life.mp4        # Video mẫu 3 - cảnh thành phố
└── README.md

# Yêu cầu với video mẫu:
1. Dung lượng mỗi video nên trong khoảng 5-10MB
2. Thời lượng khoảng 30-60 giây
3. Định dạng MP4 với codec H.264
```

Ghi chú: Vui lòng tải các video mẫu vào thư mục này trước khi chạy docker-compose.
```

---

## <a id='.env'></a>File: .env
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/.env`

```plaintext
# API Endpoints
REACT_APP_API_URL=http://52.77.213.249:3000/api
REACT_APP_API_TIMEOUT=30000

# Feature Flags
REACT_APP_ENABLE_LOGS=true
REACT_APP_ENABLE_ERROR_REPORTING=true

# Build Configuration  
PORT=8080
NODE_ENV=production
```

---

## <a id='README.md'></a>File: README.md
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/README.md`

```markdown
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

```

---

## <a id='appspec.yml'></a>File: appspec.yml
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/appspec.yml`

```yaml
version: 0.0
Resources:
  - TargetService:
      Type: AWS::ECS::Service
      Properties:
        TaskDefinition: "<TASK_DEFINITION>"
        LoadBalancerInfo:
          ContainerName: "mvs-fe"
          ContainerPort: 80
```

---

## <a id='buildspec.yml'></a>File: buildspec.yml
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/buildspec.yml`

```yaml
version: 0.2

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REPOSITORY_URL
      - REPOSITORY_URI=$ECR_REPOSITORY_URL
      - IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
  
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
  
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing image definitions file...
      - printf '[{"name":"frontend","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      - cat imagedefinitions.json

artifacts:
  files:
    - imagedefinitions.json
    - appspec.yml
    - taskdef.json
  discard-paths: yes
```

---

## <a id='docker-compose.yml'></a>File: docker-compose.yml
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/docker-compose.yml`

```yaml
version: '3.8'

services:
  frontend:
    build: .
    image: mvs-fe
    ports:
      - "80:80"
    restart: always
```

---

## <a id='git_push.sh'></a>File: git_push.sh
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/git_push.sh`

```bash
#!/bin/bash

git add .
git commit -m "Your message - $(date '+%Y-%m-%d %H:%M:%S')"
git push
```

---

## <a id='nginx.conf'></a>File: nginx.conf
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/nginx.conf`

```nginx
server {
    listen 80;
    server_name _;
    root /usr/share/nginx/html;
    index index.html;

    # Handle React routing
    location / {
        try_files $uri $uri/ /index.html;
        add_header Cache-Control "no-cache";
    }

    # Static assets caching
    location /static {
        expires 1y;
        add_header Cache-Control "public";
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 'healthy';
        add_header Content-Type text/plain;
    }
}
```

---

## <a id='package.json'></a>File: package.json
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/package.json`

```json
{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@heroicons/react": "^2.1.5",
    "@tanstack/react-query": "^5.60.2",
    "@tanstack/react-query-devtools": "^5.60.2",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "aws-sdk": "^2.1692.0",
    "axios": "^1.7.7",
    "lucide-react": "^0.456.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.28.0",
    "react-scripts": "5.0.1",
    "tailwindcss": "^3.3.5",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
```

---

## <a id='postcss.config.js'></a>File: postcss.config.js
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/postcss.config.js`

```javascript
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

```

---

## <a id='public-index.html'></a>File: public/index.html
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/public/index.html`

```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

```

---

## <a id='public-manifest.json'></a>File: public/manifest.json
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/public/manifest.json`

```json
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

```

---

## <a id='public-robots.txt'></a>File: public/robots.txt
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/public/robots.txt`

```plaintext
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

```

---

## <a id='run_local.sh'></a>File: run_local.sh
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/run_local.sh`

```bash
#!/bin/bash

docker stop fe-local
docker rm fe-local
docker build -t fe-local .
docker run -dt -p 8080:80 --name fe-local fe-local
```

---

## <a id='service.json'></a>File: service.json
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/service.json`

```json
{
    "taskDefinition": "tthau-mvs-fe",
    "cluster": "tthau-mvs-ecscluster",
    "loadBalancers": [
        {
            "targetGroupArn": "arn:aws:elasticloadbalancing:ap-southeast-1:187091248012:targetgroup/tthau-mvs-fe-tg-1/5f3019308127a99a",
            "containerName": "mvs-fe",
            "containerPort": 80
        }
    ],
    "desiredCount": 2,
    "launchType": "EC2",
    "schedulingStrategy": "REPLICA",
    "deploymentController": {
        "type": "CODE_DEPLOY"
    },
    "networkConfiguration": {
        "awsvpcConfiguration": {
            "subnets": [
                "subnet-045b4f2588f568db8",
                "subnet-0f588b2c91d44c91c"
            ],
            "securityGroups": [
                "sg-0a1d361391b50fcb4"
            ],
            "assignPublicIp": "DISABLED"
        }
    }
}
```

---

## <a id='src-App.css'></a>File: src/App.css
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/src/App.css`

```css
/* Reset default styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

.App {
  text-align: center;
  min-height: 100vh;
  background-color: #0f1824;
  /* Make sure không có position: relative để tránh tạo stacking context mới */
}

/* Ẩn tất cả các widget/icon không mong muốn */
#chat-widget,
#support-icon,
.floating-button,
.widget-container,
iframe[id^="chat"],
iframe[title*="chat"],
.intercom-lightweight-app {
  display: none !important;
  visibility: hidden !important;
}

/* Đảm bảo main content luôn có z-index thấp hơn navbar */
main {
  position: relative;
  z-index: 1;
}
```

---

## <a id='src-App.js'></a>File: src/App.js
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/src/App.js`

```javascript
// src/App.js
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { ReactQueryDevtools } from '@tanstack/react-query-devtools';
import Navbar from './components/Navbar';
import HomePage from './pages/HomePage';
import MovieDetail from './pages/MovieDetail';
import WatchMovie from './pages/WatchMovie';

const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      refetchOnWindowFocus: false,
      refetchOnMount: false,
      refetchOnReconnect: false,
      retry: 1,
      retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),
      staleTime: 5 * 60 * 1000,
      gcTime: 10 * 60 * 1000,
    },
  },
});

function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <Router>
        <div className="min-h-screen bg-[#0f1824]">
          <Navbar />
          <main className="container mx-auto px-4">
            <Routes>
              <Route path="/" element={<HomePage />} />
              <Route path="/movie/:id" element={<MovieDetail />} />
              <Route path="/watch/:id" element={<WatchMovie />} />
            </Routes>
          </main>
        </div>
      </Router>
      <ReactQueryDevtools buttonPosition="bottom-right" />
    </QueryClientProvider>
  );
}

export default App;
```

---

## <a id='src-App.test.js'></a>File: src/App.test.js
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/src/App.test.js`

```javascript
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

```

---

## <a id='src-components-ErrorBoundary.js'></a>File: src/components/ErrorBoundary.js
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/src/components/ErrorBoundary.js`

```javascript
// src/components/ErrorBoundary.js
import React from 'react';

class ErrorBoundary extends React.Component {
    constructor(props) {
        super(props);
        this.state = { hasError: false, error: null };
    }

    static getDerivedStateFromError(error) {
        return { hasError: true, error };
    }

    componentDidCatch(error, errorInfo) {
        console.error('Error caught by boundary:', error, errorInfo);
    }

    render() {
        if (this.state.hasError) {
            return (
                <div className="min-h-screen bg-[#0f1824] text-white pt-20 px-4">
                    <div className="max-w-7xl mx-auto">
                        <div className="bg-red-500/10 border border-red-500 rounded-lg p-6">
                            <h2 className="text-xl font-bold text-red-500 mb-4">
                                Oops! Something went wrong
                            </h2>
                            <p className="text-gray-300 mb-4">
                                {this.state.error?.message || 'An unexpected error occurred'}
                            </p>
                            <button
                                onClick={() => window.location.reload()}
                                className="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition"
                            >
                                Reload Page
                            </button>
                        </div>
                    </div>
                </div>
            );
        }

        return this.props.children;
    }
}

export default ErrorBoundary;
```

---

## <a id='src-components-LoadingSpinner.js'></a>File: src/components/LoadingSpinner.js
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/src/components/LoadingSpinner.js`

```javascript
// src/components/LoadingSpinner.js
import React from 'react';

const LoadingSpinner = () => {
  return (
    <div className="flex justify-center items-center h-40">
      <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
    </div>
  );
};

export default LoadingSpinner;
```

---

## <a id='src-components-MovieCard.js'></a>File: src/components/MovieCard.js
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/src/components/MovieCard.js`

```javascript
// src/components/MovieCard.js
import React from 'react';
import { Link } from 'react-router-dom';

const MovieCard = ({ movie }) => {
  if (!movie || !movie._id) {
    console.warn('MovieCard: Invalid movie data', movie);
    return null;
  }

  const {
    _id,
    title,
    thumbnail = `https://via.placeholder.com/300x450?text=${encodeURIComponent(title)}`,
    originalTitle
  } = movie;

  return (
    <Link
      to={`/movie/${_id}`}
      className="block bg-[#1a2634] rounded overflow-hidden shadow-lg hover:scale-105 transition-transform duration-200"
      onClick={(e) => {
        console.log('MovieCard clicked:', { _id, title });
      }}
    >
      <div className="relative pb-[150%]">
        <img
          className="absolute h-full w-full object-cover"
          src={thumbnail}
          alt={title}
          onError={(e) => {
            e.target.onerror = null;
            e.target.src = `https://via.placeholder.com/300x450?text=${encodeURIComponent(title)}`;
          }}
        />
      </div>
      <div className="p-4">
        <h3 className="text-white font-bold text-sm mb-1">{title}</h3>
        {originalTitle && (
          <p className="text-gray-400 text-xs">{originalTitle}</p>
        )}
      </div>
    </Link>
  );
};

export default MovieCard;
```

---

## <a id='src-components-Navbar.js'></a>File: src/components/Navbar.js
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/src/components/Navbar.js`

```javascript
import { useState, useEffect } from 'react';
import { Link, useLocation } from 'react-router-dom';

export default function Navbar() {
  const [scrollProgress, setScrollProgress] = useState(0);
  const [isAtTop, setIsAtTop] = useState(true);
  const location = useLocation();
  const isMovieDetail = location.pathname.includes('/movie/');

  useEffect(() => {
    const handleScroll = () => {
      if (isMovieDetail) {
        const posterElement = document.querySelector('.movie-poster');
        if (posterElement) {
          const posterRect = posterElement.getBoundingClientRect();
          const navbarHeight = 64;
          const triggerPoint = posterRect.height - navbarHeight;
          const currentScroll = window.scrollY;

          // Calculate scroll progress percentage
          const progress = Math.min(Math.max(currentScroll / triggerPoint, 0), 1);
          setScrollProgress(progress);
          setIsAtTop(currentScroll === 0);
        }
      } else {
        setScrollProgress(window.scrollY > 10 ? 1 : 0);
        setIsAtTop(window.scrollY === 0);
      }
    };

    window.addEventListener('scroll', handleScroll);
    handleScroll(); // Initial check
    return () => window.removeEventListener('scroll', handleScroll);
  }, [isMovieDetail]);

  // Dynamic background style
  const bgOpacity = isMovieDetail ? scrollProgress : isAtTop ? 0 : 1;
  const navbarStyle = {
    backgroundColor: `rgba(15, 24, 36, ${bgOpacity})`,
    borderBottom: bgOpacity > 0.8 ? '1px solid rgba(255, 255, 255, 0.1)' : 'none'
  };

  return (
    <nav
      className="fixed top-0 w-full z-50 transition-all duration-300"
      style={navbarStyle}
    >
      <div className="max-w-7xl mx-auto px-4">
        <div className="flex items-center justify-between h-16">
          {/* Logo */}
          <Link to="/" className="flex items-center">
            <span className="text-2xl font-bold bg-gradient-to-r from-blue-400 to-teal-400 bg-clip-text text-transparent">
              PhimWin
            </span>
          </Link>

          {/* Navigation Links */}
          <div className="hidden md:flex items-center space-x-6">
            <NavLink href="/phim-hot" text="Phim Hot" />
            <NavLink href="/phim-le" text="Phim Lẻ" />
            <NavLink href="/phim-bo" text="Phim Bộ" />
            <NavLink href="/phim-moi" text="Phim Mới" />
            <NavLink href="/faq" text="FAQ" />
          </div>

          {/* Search & User */}
          <div className="flex items-center gap-4">
            <div className="relative">
              <input
                type="text"
                placeholder="Tìm kiếm"
                className={`w-64 px-4 py-1 text-sm text-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all ${isMovieDetail && !scrollProgress
                  ? 'bg-black/30 backdrop-blur-none'
                  : 'bg-gray-800/50'
                  }`}
              />
              <button className="absolute right-0 top-0 mt-1 mr-3">
                <svg className="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
              </button>
            </div>

            <Link to="/profile">
              <svg className="w-5 h-5 text-gray-300 hover:text-white transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
              </svg>
            </Link>
          </div>
        </div>
      </div>
    </nav>
  );
}

const NavLink = ({ href, text }) => (
  <Link
    to={href}
    className="text-sm font-medium text-gray-300 hover:text-white transition-colors"
  >
    {text}
  </Link>
);
```

---

## <a id='src-config-aws.js'></a>File: src/config/aws.js
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/src/config/aws.js`

```javascript
// src/config/aws.js
import AWS from 'aws-sdk';

AWS.config.update({
  accessKeyId: process.env.REACT_APP_AWS_ACCESS_KEY,
  secretAccessKey: process.env.REACT_APP_AWS_SECRET_KEY,
  region: process.env.REACT_APP_AWS_REGION
});

const s3 = new AWS.S3();

export const getSignedUrl = async (key) => {
  try {
    const url = await s3.getSignedUrlPromise('getObject', {
      Bucket: process.env.REACT_APP_S3_BUCKET,
      Key: key,
      Expires: 3600 // URL expires in 1 hour
    });
    return url;
  } catch (error) {
    console.error('Error getting signed URL:', error);
    throw error;
  }
};

export default s3;
```

---

## <a id='src-hooks-useMovie.js'></a>File: src/hooks/useMovie.js
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/src/hooks/useMovie.js`

```javascript
// src/hooks/useMovie.js
import { useQuery } from '@tanstack/react-query';
import { getMovie } from '../services/api';

const useMovie = (id) => {
    return useQuery({
        queryKey: ['movie', id],
        queryFn: () => getMovie(id),
        select: (response) => response.data,
        enabled: Boolean(id),
        staleTime: 5 * 60 * 1000, // 5 minutes
        cacheTime: 30 * 60 * 1000, // 30 minutes
        retry: (failureCount, error) => {
            if (error.response?.status === 404) return false;
            return failureCount < 3;
        },
    });
};

export default useMovie;
```

---

## <a id='src-hooks-useMovies.js'></a>File: src/hooks/useMovies.js
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/src/hooks/useMovies.js`

```javascript
// src/hooks/useMovies.js
import { useQuery } from '@tanstack/react-query';
import { getMovies } from '../services/api';

const useMovies = () => {
    return useQuery({
        queryKey: ['movies'],
        queryFn: async () => {
            try {
                console.log('Fetching movies...');
                const response = await getMovies();
                console.log('Raw API Response:', response);

                // Validate response structure
                if (!response) {
                    console.error('API Response is null or undefined');
                    throw new Error('Invalid API response');
                }

                // Log the structure
                console.log('Response status:', response.status);
                console.log('Response data:', response.data);

                if (!response.data || !Array.isArray(response.data)) {
                    console.error('Invalid data format:', response.data);
                    throw new Error('Invalid data format received from API');
                }

                return response.data;
            } catch (error) {
                console.error('Query error:', error);
                throw error;
            }
        },
        retry: 1,
        retryDelay: 1000,
    });
};

export default useMovies;
```

---

## <a id='src-hooks-useVideoPlayer.js'></a>File: src/hooks/useVideoPlayer.js
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/src/hooks/useVideoPlayer.js`

```javascript
// src/hooks/useVideoPlayer.js
import { useState, useEffect, useRef } from 'react';
import { getVideoSource } from '../services/api';

const useVideoPlayer = (movieId) => {
  const [videoUrl, setVideoUrl] = useState('');
  const [currentServer, setCurrentServer] = useState('VIP');
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const retryCount = useRef(0);
  const maxRetries = 3;

  useEffect(() => {
    const loadVideo = async () => {
      try {
        setIsLoading(true);
        setError(null);
        const source = await getVideoSource(movieId, currentServer);
        setVideoUrl(source.url);
        setIsLoading(false);
        retryCount.current = 0;
      } catch (err) {
        console.error('Error loading video:', err);
        if (retryCount.current < maxRetries) {
          retryCount.current++;
          setTimeout(loadVideo, 1000 * retryCount.current); // Exponential backoff
        } else {
          setError('Không thể tải video. Vui lòng thử lại sau.');
          setIsLoading(false);
        }
      }
    };

    if (movieId) {
      loadVideo();
    }

    return () => {
      // Cleanup
      setVideoUrl('');
      setError(null);
      setIsLoading(false);
    };
  }, [movieId, currentServer]);

  const changeServer = (server) => {
    setCurrentServer(server);
    retryCount.current = 0; // Reset retry count when changing servers
  };

  return {
    videoUrl,
    currentServer,
    changeServer,
    isLoading,
    error
  };
};

export default useVideoPlayer;
```

---

## <a id='src-index.css'></a>File: src/index.css
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/src/index.css`

```css
@tailwind base;
@tailwind components;
@tailwind utilities;
```

---

## <a id='src-index.js'></a>File: src/index.js
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/src/index.js`

```javascript
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

```

---

## <a id='src-pages-HomePage.js'></a>File: src/pages/HomePage.js
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/src/pages/HomePage.js`

```javascript
import React from 'react';
import MovieCard from '../components/MovieCard';
import LoadingSpinner from '../components/LoadingSpinner';
import useMovies from '../hooks/useMovies';

const HomePage = () => {
  const { data: movies, isLoading, error, isError } = useMovies();

  if (isLoading) {
    return (
      <div className="min-h-screen bg-[#0f1824] text-white pt-20 flex items-center justify-center">
        <LoadingSpinner />
      </div>
    );
  }

  if (isError) {
    return (
      <div className="min-h-screen bg-[#0f1824] text-white pt-20 px-4">
        <div className="max-w-7xl mx-auto">
          <div className="bg-red-500/10 border border-red-500 rounded-lg p-4">
            <h2 className="text-lg font-semibold text-red-500 mb-2">Error loading movies</h2>
            <p className="text-red-400">{error.message}</p>
            <button
              onClick={() => window.location.reload()}
              className="mt-4 px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600"
            >
              Retry
            </button>
          </div>
        </div>
      </div>
    );
  }

  if (!movies || !Array.isArray(movies) || movies.length === 0) {
    return (
      <div className="min-h-screen bg-[#0f1824] text-white pt-20 px-4">
        <div className="max-w-7xl mx-auto text-center">
          <h2 className="text-xl font-semibold mb-2">Chưa có phim nào</h2>
          <p className="text-gray-400">Vui lòng quay lại sau</p>
        </div>
      </div>
    );
  }

  return (
    <main className="min-h-screen bg-[#0f1824] text-white pt-20">
      <div className="max-w-7xl mx-auto px-4 py-8">
        <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 gap-4 md:gap-6">
          {movies.map(movie => (
            <MovieCard key={movie._id} movie={movie} />
          ))}
        </div>
      </div>
    </main>
  );
};

export default HomePage;
```

---

## <a id='src-pages-MovieDetail.js'></a>File: src/pages/MovieDetail.js
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/src/pages/MovieDetail.js`

```javascript
// src/pages/MovieDetail.js
import React from 'react';
import { useParams, Link } from 'react-router-dom';
import useMovie from '../hooks/useMovie';
import LoadingSpinner from '../components/LoadingSpinner';

const MovieDetail = () => {
  const { id } = useParams();
  const { data: movie, isLoading, error } = useMovie(id);

  console.log('MovieDetail render:', { id, movie, isLoading, error });

  if (isLoading) {
    return (
      <div className="min-h-screen bg-[#0f1824] text-white pt-20 flex items-center justify-center">
        <LoadingSpinner />
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-[#0f1824] text-white pt-20 px-4">
        <div className="max-w-7xl mx-auto">
          <div className="bg-red-500/10 border border-red-500 rounded-lg p-6">
            <h2 className="text-xl font-bold text-red-500 mb-4">Error Loading Movie</h2>
            <p className="text-gray-300 mb-4">{error.message}</p>
            <Link
              to="/"
              className="inline-block px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition"
            >
              Back to Home
            </Link>
          </div>
        </div>
      </div>
    );
  }

  if (!movie) {
    return (
      <div className="min-h-screen bg-[#0f1824] text-white pt-20 px-4">
        <div className="max-w-7xl mx-auto">
          <div className="bg-yellow-500/10 border border-yellow-500 rounded-lg p-6">
            <h2 className="text-xl font-bold text-yellow-500 mb-4">Movie Not Found</h2>
            <p className="text-gray-300 mb-4">The requested movie could not be found.</p>
            <Link
              to="/"
              className="inline-block px-4 py-2 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600 transition"
            >
              Back to Home
            </Link>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-[#0f1824] text-white">
      {/* Hero Section */}
      <div className="movie-poster relative pt-[56.25%] lg:pt-[45%] w-full">
        {/* Background Image */}
        <div className="absolute inset-0">
          <img
            src={movie.thumbnail}
            alt={movie.title}
            className="w-full h-full object-cover"
          />
          <div className="absolute inset-0 bg-gradient-to-t from-[#0f1824] via-[#0f1824]/60 to-transparent" />
        </div>

        {/* Movie Info Overlay */}
        <div className="absolute bottom-0 left-0 right-0 p-6 md:p-12">
          <div className="max-w-7xl mx-auto flex flex-col md:flex-row gap-8">
            {/* Poster */}
            <div className="w-64 flex-shrink-0">
              <img
                src={movie.thumbnail}
                alt={movie.title}
                className="w-full rounded-lg shadow-2xl"
              />
            </div>

            {/* Info */}
            <div className="flex-1">
              <h1 className="text-4xl font-bold mb-2">{movie.title}</h1>
              {movie.originalTitle && (
                <h2 className="text-xl text-gray-300 mb-4">{movie.originalTitle}</h2>
              )}

              <div className="flex items-center gap-4 mb-4">
                {movie.rating && (
                  <>
                    <div className="flex items-center">
                      <span className="text-yellow-400 text-xl font-bold">{movie.rating}</span>
                      <span className="text-yellow-400 ml-1">/10</span>
                    </div>
                    <span className="text-gray-300">•</span>
                  </>
                )}
                <span className="text-gray-300">{movie.duration} phút</span>
                {movie.year && (
                  <>
                    <span className="text-gray-300">•</span>
                    <span className="text-gray-300">{movie.year}</span>
                  </>
                )}
              </div>

              {movie.genre && (
                <div className="flex flex-wrap gap-2 mb-6">
                  {movie.genre.map((genre, index) => (
                    <span
                      key={index}
                      className="px-3 py-1 bg-gray-700 text-gray-300 rounded-full text-sm"
                    >
                      {genre}
                    </span>
                  ))}
                </div>
              )}

              <Link
                to={`/watch/${movie._id}`}
                className="inline-flex items-center px-6 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition gap-2"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                XEM PHIM
              </Link>
            </div>
          </div>
        </div>
      </div>

      {/* Content Sections */}
      <div className="max-w-7xl mx-auto px-4 py-8">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          {/* Main Content */}
          <div className="md:col-span-2 space-y-8">
            {/* Plot */}
            <div className="bg-[#1a2634] rounded-lg p-6">
              <h3 className="text-xl font-bold mb-4">Nội dung phim</h3>
              <p className="text-gray-300 leading-relaxed">{movie.description}</p>
            </div>

            {/* Cast */}
            {movie.cast && movie.cast.length > 0 && (
              <div className="bg-[#1a2634] rounded-lg p-6">
                <h3 className="text-xl font-bold mb-4">Diễn viên</h3>
                <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4">
                  {movie.cast.map((actor, index) => (
                    <div key={index} className="text-center">
                      <div className="w-20 h-20 mx-auto mb-2">
                        <img
                          src={actor.image || `https://ui-avatars.com/api/?name=${encodeURIComponent(actor.name)}`}
                          alt={actor.name}
                          className="w-full h-full rounded-full object-cover"
                          onError={(e) => {
                            e.target.src = `https://ui-avatars.com/api/?name=${encodeURIComponent(actor.name)}`;
                          }}
                        />
                      </div>
                      <p className="font-medium text-sm">{actor.name}</p>
                      <p className="text-gray-400 text-xs">{actor.character}</p>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Trailers */}
            {movie.trailers && movie.trailers.length > 0 && (
              <div className="bg-[#1a2634] rounded-lg p-6">
                <h3 className="text-xl font-bold mb-4">Trailer</h3>
                <div className="grid grid-cols-2 gap-4">
                  {movie.trailers.map((trailer, index) => (
                    <div
                      key={index}
                      className="relative aspect-video rounded-lg overflow-hidden cursor-pointer group"
                      onClick={() => {/* Handle trailer play */ }}
                    >
                      <img
                        src={trailer.thumbnail}
                        alt="Trailer thumbnail"
                        className="w-full h-full object-cover"
                      />
                      <div className="absolute inset-0 flex items-center justify-center bg-black/50 group-hover:bg-black/30 transition">
                        <svg className="w-16 h-16 text-white/90" viewBox="0 0 24 24" fill="currentColor">
                          <path d="M8 5v14l11-7z" />
                        </svg>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Movie Details */}
            <div className="bg-[#1a2634] rounded-lg p-6">
              <h3 className="text-xl font-bold mb-4">Chi tiết</h3>
              <div className="space-y-3">
                <DetailRow label="Trạng thái" value={movie.status} />
                <DetailRow label="Đạo diễn" value={movie.director} />
                <DetailRow label="Quốc gia" value={movie.country} />
                <DetailRow label="Khởi chiếu" value={movie.releaseDate} />
                <DetailRow label="Thời lượng" value={`${movie.duration} phút`} />
                <DetailRow label="Lượt xem" value={movie.views?.toLocaleString()} />
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Helper Component
const DetailRow = ({ label, value }) => {
  if (!value) return null;
  return (
    <div className="flex justify-between">
      <span className="text-gray-400">{label}:</span>
      <span>{value}</span>
    </div>
  );
};

export default MovieDetail;
```

---

## <a id='src-pages-WatchMovie.js'></a>File: src/pages/WatchMovie.js
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/src/pages/WatchMovie.js`

```javascript
// src/pages/WatchMovie.js
import React, { useState, useRef, useEffect } from 'react';
import { useParams, Link } from 'react-router-dom';
import useMovie from '../hooks/useMovie';
import useVideoPlayer from '../hooks/useVideoPlayer';
import LoadingSpinner from '../components/LoadingSpinner';

const WatchMovie = () => {
  const { id } = useParams();
  const videoRef = useRef(null);
  const { data: movie, isLoading: movieLoading } = useMovie(id);
  const [selectedSubtitle, setSelectedSubtitle] = useState('Vietsub');
  const [selectedServer, setSelectedServer] = useState('VIP');
  const {
    videoUrl,
    isLoading: videoLoading,
    error,
    changeServer
  } = useVideoPlayer(id);

  useEffect(() => {
    if (videoRef.current) {
      const video = videoRef.current;

      const handleError = (e) => {
        console.error('Video error:', e);
        if (videoRef.current) {
          videoRef.current.load(); // Attempt to reload
        }
      };

      const handleWaiting = () => {
        console.log('Video buffering...');
      };

      video.addEventListener('error', handleError);
      video.addEventListener('waiting', handleWaiting);

      return () => {
        video.removeEventListener('error', handleError);
        video.removeEventListener('waiting', handleWaiting);
      };
    }
  }, []);

  const handleServerChange = (server) => {
    setSelectedServer(server);
    changeServer(server);
  };

  if (movieLoading || videoLoading) return <LoadingSpinner />;
  if (error) return <div className="text-red-500 text-center">{error}</div>;

  return (
    <div className="min-h-screen bg-[#0f1824] text-white">
      <div className="max-w-7xl mx-auto px-4 py-8">
        {/* Video Player */}
        <div className="aspect-video bg-black rounded-lg overflow-hidden shadow-lg mb-6">
          {videoUrl ? (
            <video
              ref={videoRef}
              className="w-full h-full"
              controls
              playsInline
              controlsList="nodownload"
              poster={movie?.thumbnail}
              preload="metadata"
            >
              <source src={videoUrl} type="video/mp4" />
              Your browser does not support the video tag.
            </video>
          ) : (
            <div className="w-full h-full flex items-center justify-center">
              <p className="text-gray-400">Video không khả dụng</p>
            </div>
          )}
        </div>

        {/* Title & Info */}
        <div className="mb-6">
          <h1 className="text-2xl font-bold">{movie?.title}</h1>
          <p className="text-gray-400 mt-1">{movie?.originalTitle}</p>
        </div>

        {/* Controls */}
        <div className="bg-[#1a2634] rounded-lg p-6 mb-6">
          {/* Servers */}
          <div className="mb-4">
            <h3 className="text-lg font-bold mb-3">Chọn server:</h3>
            <div className="flex flex-wrap gap-2">
              <ServerButton
                active={selectedServer === 'VIP'}
                onClick={() => handleServerChange('VIP')}
              >
                VIP #1
              </ServerButton>
              <ServerButton
                active={selectedServer === 'HD'}
                onClick={() => handleServerChange('HD')}
              >
                HD #2
              </ServerButton>
            </div>
          </div>

          {/* Subtitles */}
          <div className="mb-4">
            <h3 className="text-lg font-bold mb-3">Phụ đề:</h3>
            <div className="flex flex-wrap gap-2">
              <SubtitleButton
                active={selectedSubtitle === 'Vietsub'}
                onClick={() => setSelectedSubtitle('Vietsub')}
              >
                Vietsub
              </SubtitleButton>
              <SubtitleButton
                active={selectedSubtitle === 'Thuyết minh'}
                onClick={() => setSelectedSubtitle('Thuyết minh')}
              >
                Thuyết minh
              </SubtitleButton>
              <SubtitleButton
                active={selectedSubtitle === 'Raw'}
                onClick={() => setSelectedSubtitle('Raw')}
              >
                Raw
              </SubtitleButton>
            </div>
          </div>

          {/* Help Text */}
          <p className="text-sm text-gray-400">
            Phim bị lag/giật?{' '}
            <Link to="/help" className="text-blue-400 hover:underline">
              Hướng dẫn khắc phục
            </Link>
          </p>
        </div>

        {/* Movie Details */}
        <div className="bg-[#1a2634] rounded-lg p-6">
          <h3 className="text-xl font-bold mb-4">Thông tin phim</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-3">
              <InfoRow label="Trạng thái" value={movie?.status} />
              <InfoRow label="Thời lượng" value={`${movie?.duration} phút`} />
              <InfoRow label="Đạo diễn" value={movie?.director} />
              <InfoRow label="Thể loại" value={movie?.genre?.join(', ')} />
            </div>
            <div className="space-y-3">
              <InfoRow label="Năm phát hành" value={movie?.year} />
              <InfoRow label="Quốc gia" value={movie?.country} />
              <InfoRow label="Khởi chiếu" value={movie?.releaseDate} />
              <InfoRow label="Lượt xem" value={movie?.views?.toLocaleString()} />
            </div>
          </div>

          {/* Description */}
          <div className="mt-6">
            <h4 className="font-bold mb-2">Nội dung phim</h4>
            <p className="text-gray-300 leading-relaxed">{movie?.description}</p>
          </div>
        </div>
      </div>
    </div>
  );
};

// Helper Components
const ServerButton = ({ active, children, onClick }) => (
  <button
    onClick={onClick}
    className={`
      px-4 py-2 rounded-lg font-medium transition-colors
      ${active
        ? 'bg-blue-600 text-white'
        : 'bg-[#1a2634] text-gray-300 hover:bg-[#2a3644]'
      }
    `}
  >
    {children}
  </button>
);

const SubtitleButton = ({ active, children, onClick }) => (
  <button
    onClick={onClick}
    className={`
      px-4 py-2 rounded-lg font-medium transition-colors
      ${active
        ? 'bg-green-600 text-white'
        : 'bg-[#1a2634] text-gray-300 hover:bg-[#2a3644]'
      }
    `}
  >
    {children}
  </button>
);

const InfoRow = ({ label, value }) => (
  <div className="flex justify-between">
    <span className="text-gray-400">{label}:</span>
    <span>{value}</span>
  </div>
);

export default WatchMovie;
```

---

## <a id='src-reportWebVitals.js'></a>File: src/reportWebVitals.js
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/src/reportWebVitals.js`

```javascript
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

```

---

## <a id='src-services-api.js'></a>File: src/services/api.js
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/src/services/api.js`

```javascript
// src/services/api.js
const API_BASE_URL = process.env.REACT_APP_API_URL;

const handleResponse = async (response) => {
  if (!response.ok) {
    const contentType = response.headers.get('content-type');
    let errorMessage;

    try {
      if (contentType && contentType.includes('application/json')) {
        const errorData = await response.json();
        errorMessage = errorData.message || `HTTP error! status: ${response.status}`;
      } else {
        errorMessage = await response.text() || `HTTP error! status: ${response.status}`;
      }
    } catch (e) {
      errorMessage = `HTTP error! status: ${response.status}`;
    }

    throw new Error(errorMessage);
  }
  return response.json();
};

export const getMovies = async () => {
  try {
    console.log('Fetching from:', API_BASE_URL);
    const response = await fetch(`${API_BASE_URL}/movies`, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      credentials: 'omit' // Thay đổi thành 'omit'
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error fetching movies:', error);
    throw error;
  }
};

export const getMovie = async (id) => {
  try {
    console.log('Fetching movie:', id);
    const response = await fetch(`${API_BASE_URL}/movies/${id}`);

    if (!response.ok) {
      throw new Error('Failed to fetch movie details');
    }

    const data = await response.json();
    console.log('Movie response:', data);
    return data;
  } catch (error) {
    console.error('Error fetching movie:', error);
    throw error;
  }
};

export const getVideoSource = async (movieId, server = 'default') => {
  try {
    if (!movieId) {
      throw new Error('Movie ID is required');
    }

    console.log('Getting video source for movie:', movieId, 'server:', server);

    const checkResponse = await fetch(`${API_BASE_URL}/movies/${movieId}`, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
      },
    });

    if (!checkResponse.ok) {
      throw new Error('Movie not found or stream not available');
    }

    const streamUrl = `${API_BASE_URL}/movies/${movieId}/stream`;
    console.log('Stream URL:', streamUrl);

    return {
      url: streamUrl,
      quality: '1080p',
      server: server
    };
  } catch (error) {
    console.error('Error getting video source:', error);
    throw error;
  }
};
```

---

## <a id='src-setupTests.js'></a>File: src/setupTests.js
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/src/setupTests.js`

```javascript
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

```

---

## <a id='tailwind.config.js'></a>File: tailwind.config.js
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/tailwind.config.js`

```javascript
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        primary: '#1d4ed8',
        secondary: '#4b5563',
      },
      animation: {
        'fadeIn': 'fadeIn 200ms ease-out forwards',
      },
      keyframes: {
        fadeIn: {
          '0%': {
            opacity: '0',
            transform: 'translateY(-10px)',
          },
          '100%': {
            opacity: '1',
            transform: 'translateY(0)',
          },
        },
      },
    },
  },
  plugins: [],
}
```

---

## <a id='taskdef.json'></a>File: taskdef.json
**Full Path**: `/home/tthau/PROJECT/moviestream/1.frontend/taskdef.json`

```json
{
  "family": "tthau-mvs-fe",
  "networkMode": "awsvpc",
  "requiresCompatibilities": [
    "EC2"
  ],
  "cpu": "256",
  "memory": "512",
  "containerDefinitions": [
    {
      "name": "mvs-fe",
      "image": "<IMAGE1_NAME>",
      "essential": true,
      "portMappings": [
        {
          "containerPort": 80,
          "protocol": "tcp"
        }
      ],
      "logConfiguration": {
        "logDriver": "awslogs",
        "options": {
          "awslogs-group": "/ecs/tthau-mvs",
          "awslogs-region": "ap-southeast-1",
          "awslogs-stream-prefix": "frontend"
        }
      }
    }
  ]
}
```

---

## Summary
Total files processed: 38

### Files List:
- ###.local-test/docker-compose.yml
- ###.local-test/mongo-init.js
- ###.local-test/sample-data/README.md
- .env
- README.md
- appspec.yml
- buildspec.yml
- docker-compose.yml
- git_push.sh
- nginx.conf
- package.json
- postcss.config.js
- public/index.html
- public/manifest.json
- public/robots.txt
- run_local.sh
- service.json
- src/App.css
- src/App.js
- src/App.test.js
- src/components/ErrorBoundary.js
- src/components/LoadingSpinner.js
- src/components/MovieCard.js
- src/components/Navbar.js
- src/config/aws.js
- src/hooks/useMovie.js
- src/hooks/useMovies.js
- src/hooks/useVideoPlayer.js
- src/index.css
- src/index.js
- src/pages/HomePage.js
- src/pages/MovieDetail.js
- src/pages/WatchMovie.js
- src/reportWebVitals.js
- src/services/api.js
- src/setupTests.js
- tailwind.config.js
- taskdef.json
# Files Concatenation Report

Generated on: 2024-12-09 09:22:52

Source directory: /home/tthau/PROJECT/moviestream/2.backend
File types: All supported types

---

## Table of Contents

- [.env](#.env)
- [README.md](#README.md)
- [dist/app.js](#dist-app.js)
- [dist/config/database.js](#dist-config-database.js)
- [dist/config/environment.js](#dist-config-environment.js)
- [dist/controllers/movie.controller.js](#dist-controllers-movie.controller.js)
- [dist/controllers/stream.controller.js](#dist-controllers-stream.controller.js)
- [dist/middlewares/error.middleware.js](#dist-middlewares-error.middleware.js)
- [dist/models/movie.model.js](#dist-models-movie.model.js)
- [dist/routes/index.js](#dist-routes-index.js)
- [dist/routes/movie.routes.js](#dist-routes-movie.routes.js)
- [dist/services/database.service.js](#dist-services-database.service.js)
- [dist/services/interfaces.js](#dist-services-interfaces.js)
- [dist/services/movie.service.js](#dist-services-movie.service.js)
- [dist/services/s3.service.js](#dist-services-s3.service.js)
- [dist/services/storage.service.js](#dist-services-storage.service.js)
- [dist/services/stream.service.js](#dist-services-stream.service.js)
- [dist/utils/apiError.js](#dist-utils-apiError.js)
- [dist/utils/asyncHandler.js](#dist-utils-asyncHandler.js)
- [git_push.sh](#git_push.sh)
- [migrations/20241204085654-create-movies.js](#migrations-20241204085654-create-movies.js)
- [migrations/fix-video-urls.js](#migrations-fix-video-urls.js)
- [package.json](#package.json)
- [scripts/uploadJoker.ts](#scripts-uploadJoker.ts)
- [scripts/uploadSample.ts](#scripts-uploadSample.ts)
- [scripts/uploadSampleTwo.ts](#scripts-uploadSampleTwo.ts)
- [src/app.ts](#src-app.ts)
- [src/config/database.ts](#src-config-database.ts)
- [src/config/environment.ts](#src-config-environment.ts)
- [src/controllers/movie.controller.ts](#src-controllers-movie.controller.ts)
- [src/controllers/stream.controller.ts](#src-controllers-stream.controller.ts)
- [src/middlewares/error.middleware.ts](#src-middlewares-error.middleware.ts)
- [src/models/movie.model.ts](#src-models-movie.model.ts)
- [src/routes/movie.routes.ts](#src-routes-movie.routes.ts)
- [src/services/interfaces.ts](#src-services-interfaces.ts)
- [src/services/s3.service.ts](#src-services-s3.service.ts)
- [src/services/storage.service.ts](#src-services-storage.service.ts)
- [src/utils/apiError.ts](#src-utils-apiError.ts)
- [src/utils/asyncHandler.ts](#src-utils-asyncHandler.ts)
- [taskdef.json](#taskdef.json)
- [tsconfig.json](#tsconfig.json)

---

## <a id='.env'></a>File: .env
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/.env`

```plaintext
// .env
NODE_ENV=development
PORT=3000
HOST=0.0.0.0

# MongoDB Configuration
MONGODB_LOCAL_URI=mongodb://mongodb:27017/movie-streaming
MONGODB_MAX_POOL_SIZE=10
MONGODB_TIMEOUT=5000

# Storage Configuration  
USE_LOCAL_STORAGE=true
LOCAL_STORAGE_PATH=/app/uploads
UPLOAD_MAX_FILE_SIZE=100000000

# CORS Configuration
ALLOWED_ORIGINS=http://localhost:8080,http://localhost:3000

```

---

## <a id='README.md'></a>File: README.md
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/README.md`

```markdown

```

---

## <a id='dist-app.js'></a>File: dist/app.js
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/dist/app.js`

```javascript
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// src/app.ts
const express_1 = __importDefault(require("express"));
const cors_1 = __importDefault(require("cors"));
const environment_1 = require("./config/environment");
const database_1 = require("./config/database");
const movie_routes_1 = __importDefault(require("./routes/movie.routes"));
const error_middleware_1 = require("./middlewares/error.middleware");
const app = (0, express_1.default)();
// Middleware
app.use((0, cors_1.default)({
    // Allow both HTTP and HTTPS variants
    origin: [
        'http://52.77.213.249',
        'http://52.77.213.249:8080',
        'http://localhost:8080',
        'http://localhost:3000'
    ],
    // More explicit methods
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'HEAD', 'PATCH'],
    // Include all necessary headers
    allowedHeaders: [
        'Content-Type',
        'Authorization',
        'X-Requested-With',
        'Accept',
        'Origin'
    ],
    // Additional CORS options for robustness
    credentials: true,
    exposedHeaders: ['Content-Length', 'Content-Range'],
    maxAge: 86400 // 24 hours
}));
// Add a pre-flight OPTIONS handler for all routes
app.options('*', (0, cors_1.default)());
app.use(express_1.default.json());
// Health check endpoint
app.get('/health', (_req, res) => {
    res.json({ status: 'OK', timestamp: new Date().toISOString() });
});
// Routes
app.use('/api/movies', movie_routes_1.default);
// Error handling
app.use(error_middleware_1.errorHandler);
// Server startup
const start = async () => {
    try {
        await (0, database_1.connectDB)();
        app.listen(environment_1.config.port, () => {
            console.log(`Server running on port ${environment_1.config.port}`);
        });
    }
    catch (error) {
        console.error('Failed to start server:', error);
        process.exit(1);
    }
};
start();

```

---

## <a id='dist-config-database.js'></a>File: dist/config/database.js
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/dist/config/database.js`

```javascript
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.closeDB = exports.connectDB = void 0;
// src/config/database.ts
const mongoose_1 = __importDefault(require("mongoose"));
const environment_1 = require("./environment");
const connectDB = async () => {
    try {
        await mongoose_1.default.connect(environment_1.config.mongoose.url);
        console.log('✅ Connected to MongoDB');
        mongoose_1.default.connection.on('error', (err) => {
            console.error('MongoDB connection error:', err);
        });
        mongoose_1.default.connection.on('disconnected', () => {
            console.log('MongoDB disconnected');
        });
    }
    catch (error) {
        console.error('❌ MongoDB connection error:', error);
        process.exit(1);
    }
};
exports.connectDB = connectDB;
const closeDB = async () => {
    try {
        await mongoose_1.default.connection.close();
        console.log('MongoDB connection closed');
    }
    catch (error) {
        console.error('Error closing MongoDB connection:', error);
        process.exit(1);
    }
};
exports.closeDB = closeDB;

```

---

## <a id='dist-config-environment.js'></a>File: dist/config/environment.js
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/dist/config/environment.js`

```javascript
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.config = void 0;
// src/config/environment.ts
const dotenv_1 = __importDefault(require("dotenv"));
const zod_1 = require("zod");
dotenv_1.default.config();
const envSchema = zod_1.z.object({
    NODE_ENV: zod_1.z.enum(['development', 'production', 'test']).default('development'),
    PORT: zod_1.z.string().default('3000'),
    MONGODB_URI: zod_1.z.string().optional(),
    USE_LOCAL_STORAGE: zod_1.z.string().default('true'),
    LOCAL_STORAGE_PATH: zod_1.z.string().default('./uploads'),
});
const envVars = envSchema.parse(process.env);
exports.config = {
    env: envVars.NODE_ENV,
    port: parseInt(envVars.PORT, 10),
    useLocalStorage: envVars.USE_LOCAL_STORAGE === 'true',
    localStoragePath: envVars.LOCAL_STORAGE_PATH,
    mongoose: {
        url: envVars.MONGODB_URI || 'mongodb://localhost:27017/movie-streaming',
    }
};

```

---

## <a id='dist-controllers-movie.controller.js'></a>File: dist/controllers/movie.controller.js
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/dist/controllers/movie.controller.js`

```javascript
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMovie = exports.getMovie = exports.getMovies = void 0;
const movie_model_1 = require("../models/movie.model");
const storage_service_1 = require("../services/storage.service");
const asyncHandler_1 = require("../utils/asyncHandler");
const path_1 = __importDefault(require("path"));
exports.getMovies = (0, asyncHandler_1.asyncHandler)(async (_req, res) => {
    const movies = await movie_model_1.Movie.find()
        .select('title description thumbnail duration')
        .sort({ createdAt: -1 });
    res.json({
        status: 'success',
        data: movies
    });
});
exports.getMovie = (0, asyncHandler_1.asyncHandler)(async (req, res) => {
    const movie = await movie_model_1.Movie.findById(req.params.id);
    if (!movie) {
        return res.status(404).json({
            status: 'error',
            message: 'Movie not found'
        });
    }
    res.json({
        status: 'success',
        data: movie
    });
});
exports.createMovie = (0, asyncHandler_1.asyncHandler)(async (req, res) => {
    const { title, description, duration } = req.body;
    const videoFile = req.file;
    if (!videoFile) {
        return res.status(400).json({
            status: 'error',
            message: 'Video file is required'
        });
    }
    const filename = `videos/${Date.now()}-${path_1.default.basename(videoFile.originalname)}`;
    await storage_service_1.storageService.uploadFile(filename, videoFile.buffer);
    const movie = await movie_model_1.Movie.create({
        title,
        description,
        duration: parseInt(duration),
        videoUrl: filename,
        thumbnail: `https://via.placeholder.com/300x450?text=${encodeURIComponent(title)}`
    });
    res.status(201).json({
        status: 'success',
        data: movie
    });
});

```

---

## <a id='dist-controllers-stream.controller.js'></a>File: dist/controllers/stream.controller.js
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/dist/controllers/stream.controller.js`

```javascript
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.streamVideo = void 0;
const movie_model_1 = require("../models/movie.model");
const asyncHandler_1 = require("../utils/asyncHandler");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
exports.streamVideo = (0, asyncHandler_1.asyncHandler)(async (req, res) => {
    const { id } = req.params;
    const movie = await movie_model_1.Movie.findById(id);
    if (!movie) {
        return res.status(404).json({ message: 'Movie not found' });
    }
    const videoPath = path_1.default.join(process.cwd(), 'uploads', movie.videoUrl);
    if (!fs_1.default.existsSync(videoPath)) {
        return res.status(404).json({ message: 'Video file not found' });
    }
    const stat = fs_1.default.statSync(videoPath);
    const fileSize = stat.size;
    const range = req.headers.range;
    if (range) {
        const parts = range.replace(/bytes=/, "").split("-");
        const start = parseInt(parts[0], 10);
        const end = parts[1] ? parseInt(parts[1], 10) : Math.min(start + 1024 * 1024, fileSize - 1);
        const chunksize = (end - start) + 1;
        if (start >= fileSize || end >= fileSize) {
            res.status(416).send('Requested range not satisfiable');
            return;
        }
        res.writeHead(206, {
            'Content-Range': `bytes ${start}-${end}/${fileSize}`,
            'Accept-Ranges': 'bytes',
            'Content-Length': chunksize,
            'Content-Type': 'video/mp4',
        });
        const stream = fs_1.default.createReadStream(videoPath, { start, end });
        stream.pipe(res);
    }
    else {
        res.writeHead(200, {
            'Content-Length': fileSize,
            'Content-Type': 'video/mp4',
        });
        fs_1.default.createReadStream(videoPath).pipe(res);
    }
});

```

---

## <a id='dist-middlewares-error.middleware.js'></a>File: dist/middlewares/error.middleware.js
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/dist/middlewares/error.middleware.js`

```javascript
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorHandler = void 0;
const apiError_1 = require("../utils/apiError");
const errorHandler = (err, _req, res, _next) => {
    console.error('Error:', err);
    if (err instanceof apiError_1.ApiError) {
        return res.status(err.status).json({
            status: 'error',
            message: err.message
        });
    }
    return res.status(500).json({
        status: 'error',
        message: 'Internal server error'
    });
};
exports.errorHandler = errorHandler;

```

---

## <a id='dist-models-movie.model.js'></a>File: dist/models/movie.model.js
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/dist/models/movie.model.js`

```javascript
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Movie = void 0;
// src/models/movie.model.ts
const mongoose_1 = __importDefault(require("mongoose"));
const movieSchema = new mongoose_1.default.Schema({
    title: {
        type: String,
        required: true,
        trim: true,
    },
    description: {
        type: String,
        required: true,
    },
    videoUrl: {
        type: String,
        required: true,
    },
    duration: {
        type: Number,
        required: true,
    },
    thumbnail: {
        type: String,
        required: true,
    },
    originalTitle: String,
    genre: [String],
    rating: {
        type: Number,
        min: 0,
        max: 10,
    },
    year: Number,
    country: String,
    director: String,
    cast: [{
            name: String,
            character: String,
            image: String,
        }],
    status: {
        type: String,
        enum: ['Released', 'Coming Soon', 'In Production'],
        default: 'Released'
    },
    views: {
        type: Number,
        default: 0
    },
    releaseDate: String
}, { timestamps: true });
// Indexes for better query performance
movieSchema.index({ title: 'text' });
movieSchema.index({ createdAt: -1 });
movieSchema.index({ views: -1 });
movieSchema.index({ rating: -1 });
movieSchema.index({ year: -1 });
exports.Movie = mongoose_1.default.model('Movie', movieSchema);

```

---

## <a id='dist-routes-index.js'></a>File: dist/routes/index.js
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/dist/routes/index.js`

```javascript
"use strict";

```

---

## <a id='dist-routes-movie.routes.js'></a>File: dist/routes/movie.routes.js
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/dist/routes/movie.routes.js`

```javascript
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// src/routes/movie.routes.ts
const express_1 = __importDefault(require("express"));
const multer_1 = __importDefault(require("multer"));
const stream_controller_1 = require("../controllers/stream.controller");
const movie_controller_1 = require("../controllers/movie.controller");
const router = express_1.default.Router();
// Configure multer for file uploads
const upload = (0, multer_1.default)({
    storage: multer_1.default.memoryStorage(),
    limits: {
        fileSize: 100 * 1024 * 1024, // 100MB limit
    }
});
// Movie routes
router.get('/', movie_controller_1.getMovies);
router.get('/:id', movie_controller_1.getMovie);
router.post('/', upload.single('video'), movie_controller_1.createMovie);
router.get('/:id/stream', stream_controller_1.streamVideo);
exports.default = router;

```

---

## <a id='dist-services-database.service.js'></a>File: dist/services/database.service.js
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/dist/services/database.service.js`

```javascript
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.databaseService = void 0;
// src/services/database.service.ts
const mongoose_1 = __importDefault(require("mongoose"));
const environment_1 = require("../config/environment");
class DatabaseService {
    constructor() {
        this.awsConnection = null;
        this.localConnection = null;
        this.activeConnection = null;
        this.reconnectTimer = null;
        this.setupConnectionMonitoring();
    }
    setupConnectionMonitoring() {
        // Monitor global mongoose connection
        mongoose_1.default.connection.on('disconnected', () => {
            console.log('MongoDB connection lost');
            this.handleDisconnect();
        });
        mongoose_1.default.connection.on('error', (err) => {
            console.error('MongoDB connection error:', err);
            this.handleDisconnect();
        });
        // Monitor AWS connection specifically
        if (this.awsConnection) {
            this.awsConnection.on('disconnected', () => {
                console.log('AWS MongoDB connection lost');
                this.handleDisconnect();
            });
        }
        // Monitor local connection specifically
        if (this.localConnection) {
            this.localConnection.on('disconnected', () => {
                console.log('Local MongoDB connection lost');
                this.handleDisconnect();
            });
        }
    }
    async handleDisconnect() {
        if (this.activeConnection === 'aws') {
            console.log('AWS connection lost, failing over to local...');
            try {
                await this.connectToLocal();
            }
            catch (error) {
                console.error('Failed to connect to local MongoDB:', error);
                // Try to reconnect to either database
                this.startReconnectTimer();
            }
        }
        else if (this.activeConnection === 'local') {
            console.log('Local connection lost, attempting to reconnect...');
            try {
                await this.connectToLocal();
            }
            catch (error) {
                console.error('Failed to reconnect to local MongoDB:', error);
                this.startReconnectTimer();
            }
        }
        else {
            // No active connection, try to establish one
            this.startReconnectTimer();
        }
    }
    startReconnectTimer() {
        if (this.reconnectTimer) {
            clearInterval(this.reconnectTimer);
        }
        this.reconnectTimer = setInterval(async () => {
            console.log('Attempting to reconnect...');
            try {
                if (this.activeConnection !== 'aws') {
                    await this.connectToAWS();
                    if (this.reconnectTimer) {
                        clearInterval(this.reconnectTimer);
                        this.reconnectTimer = null;
                    }
                }
            }
            catch (error) {
                console.log('AWS reconnection failed, trying local');
                try {
                    await this.connectToLocal();
                    if (this.reconnectTimer) {
                        clearInterval(this.reconnectTimer);
                        this.reconnectTimer = null;
                    }
                }
                catch (localError) {
                    console.error('Local reconnection also failed');
                }
            }
        }, 5000); // Try every 5 seconds
    }
    async connect() {
        try {
            await this.connectToAWS();
        }
        catch (error) {
            console.log('AWS connection failed, falling back to local');
            try {
                await this.connectToLocal();
            }
            catch (localError) {
                console.error('Local connection also failed:', localError);
                this.startReconnectTimer();
                throw localError;
            }
        }
    }
    async connectToAWS() {
        try {
            if (this.localConnection) {
                await this.localConnection.close();
                this.localConnection = null;
            }
            const connection = await mongoose_1.default.createConnection(environment_1.config.mongoose.awsUrl || '', {
                maxPoolSize: environment_1.config.mongoose.maxPoolSize,
                serverSelectionTimeoutMS: environment_1.config.mongoose.timeout
            });
            await connection.asPromise();
            this.awsConnection = connection;
            this.activeConnection = 'aws';
            console.log('✅ Connected to AWS MongoDB');
        }
        catch (error) {
            console.error('❌ AWS MongoDB connection error:', error);
            throw error;
        }
    }
    async connectToLocal() {
        try {
            if (this.awsConnection) {
                await this.awsConnection.close();
                this.awsConnection = null;
            }
            const connection = await mongoose_1.default.createConnection(environment_1.config.mongoose.localUrl, {
                maxPoolSize: environment_1.config.mongoose.maxPoolSize,
                serverSelectionTimeoutMS: environment_1.config.mongoose.timeout
            });
            await connection.asPromise();
            this.localConnection = connection;
            this.activeConnection = 'local';
            console.log('✅ Connected to Local MongoDB');
        }
        catch (error) {
            console.error('❌ Local MongoDB connection error:', error);
            throw error;
        }
    }
    getConnection() {
        if (!this.activeConnection || (!this.awsConnection && !this.localConnection)) {
            // Try to reconnect if no active connection
            this.handleDisconnect();
            throw new Error('No active database connection');
        }
        return this.activeConnection === 'aws' ? this.awsConnection : this.localConnection;
    }
    async disconnect() {
        if (this.awsConnection) {
            await this.awsConnection.close();
            this.awsConnection = null;
        }
        if (this.localConnection) {
            await this.localConnection.close();
            this.localConnection = null;
        }
        if (this.reconnectTimer) {
            clearInterval(this.reconnectTimer);
            this.reconnectTimer = null;
        }
        this.activeConnection = null;
    }
    getCurrentStatus() {
        return {
            activeConnection: this.activeConnection,
            hasAwsConnection: !!this.awsConnection,
            hasLocalConnection: !!this.localConnection,
            isReconnecting: !!this.reconnectTimer
        };
    }
}
exports.databaseService = new DatabaseService();

```

---

## <a id='dist-services-interfaces.js'></a>File: dist/services/interfaces.js
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/dist/services/interfaces.js`

```javascript
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

```

---

## <a id='dist-services-movie.service.js'></a>File: dist/services/movie.service.js
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/dist/services/movie.service.js`

```javascript
"use strict";

```

---

## <a id='dist-services-s3.service.js'></a>File: dist/services/s3.service.js
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/dist/services/s3.service.js`

```javascript
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.S3StorageService = void 0;
// src/services/s3.service.ts
const aws_sdk_1 = __importDefault(require("aws-sdk"));
class S3StorageService {
    constructor(config) {
        this.s3 = new aws_sdk_1.default.S3({
            region: config.region,
            accessKeyId: config.accessKeyId,
            secretAccessKey: config.secretAccessKey,
        });
        this.bucket = config.bucketName;
    }
    async uploadFile(key, file) {
        const params = {
            Bucket: this.bucket,
            Key: key,
            Body: file,
        };
        const result = await this.s3.upload(params).promise();
        return result.Location;
    }
    getFileStream(key) {
        return this.s3.getObject({
            Bucket: this.bucket,
            Key: key,
        }).createReadStream();
    }
    async deleteFile(key) {
        await this.s3.deleteObject({
            Bucket: this.bucket,
            Key: key,
        }).promise();
    }
    getFilePath(key) {
        return `s3://${this.bucket}/${key}`;
    }
}
exports.S3StorageService = S3StorageService;

```

---

## <a id='dist-services-storage.service.js'></a>File: dist/services/storage.service.js
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/dist/services/storage.service.js`

```javascript
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.storageService = void 0;
// src/services/storage.service.ts
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
class LocalStorageService {
    constructor() {
        this.storagePath = path_1.default.join(process.cwd(), 'uploads');
        // Ensure directories exist
        if (!fs_1.default.existsSync(this.storagePath)) {
            fs_1.default.mkdirSync(this.storagePath, { recursive: true });
        }
        const videosPath = path_1.default.join(this.storagePath, 'videos');
        if (!fs_1.default.existsSync(videosPath)) {
            fs_1.default.mkdirSync(videosPath, { recursive: true });
        }
    }
    async uploadFile(key, file) {
        const filePath = path_1.default.join(this.storagePath, key);
        const fileDir = path_1.default.dirname(filePath);
        if (!fs_1.default.existsSync(fileDir)) {
            fs_1.default.mkdirSync(fileDir, { recursive: true });
        }
        await fs_1.default.promises.writeFile(filePath, file);
        return key;
    }
    getFileStream(key) {
        const filePath = this.getFilePath(key);
        return fs_1.default.createReadStream(filePath);
    }
    async deleteFile(key) {
        const filePath = this.getFilePath(key);
        await fs_1.default.promises.unlink(filePath);
    }
    getFilePath(key) {
        return path_1.default.join(this.storagePath, key);
    }
}
exports.storageService = new LocalStorageService();

```

---

## <a id='dist-services-stream.service.js'></a>File: dist/services/stream.service.js
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/dist/services/stream.service.js`

```javascript
"use strict";

```

---

## <a id='dist-utils-apiError.js'></a>File: dist/utils/apiError.js
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/dist/utils/apiError.js`

```javascript
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiError = void 0;
// src/utils/apiError.ts
class ApiError extends Error {
    constructor(status, message) {
        super(message);
        this.status = status;
        Error.captureStackTrace(this, this.constructor);
    }
}
exports.ApiError = ApiError;

```

---

## <a id='dist-utils-asyncHandler.js'></a>File: dist/utils/asyncHandler.js
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/dist/utils/asyncHandler.js`

```javascript
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.asyncHandler = void 0;
const asyncHandler = (fn) => (req, res, next) => {
    Promise.resolve(fn(req, res, next)).catch(next);
};
exports.asyncHandler = asyncHandler;

```

---

## <a id='git_push.sh'></a>File: git_push.sh
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/git_push.sh`

```bash
#!/bin/bash

git add .
git commit -m "Your message - $(date '+%Y-%m-%d %H:%M:%S')"
git push
```

---

## <a id='migrations-20241204085654-create-movies.js'></a>File: migrations/20241204085654-create-movies.js
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/migrations/20241204085654-create-movies.js`

```javascript
'use strict';

/** @type {import('sequelize-cli').Migration} */
module.exports = {
  async up (queryInterface, Sequelize) {
    /**
     * Add altering commands here.
     *
     * Example:
     * await queryInterface.createTable('users', { id: Sequelize.INTEGER });
     */
  },

  async down (queryInterface, Sequelize) {
    /**
     * Add reverting commands here.
     *
     * Example:
     * await queryInterface.dropTable('users');
     */
  }
};

```

---

## <a id='migrations-fix-video-urls.js'></a>File: migrations/fix-video-urls.js
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/migrations/fix-video-urls.js`

```javascript
// migrations/fix-video-urls.js
db.movies.updateMany(
    {},
    [{
        $set: {
            videoUrl: {
                $concat: [
                    "videos/",
                    { $arrayElemAt: [{ $split: ["$videoUrl", "/"] }, -1] }
                ]
            }
        }
    }]
);
```

---

## <a id='package.json'></a>File: package.json
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/package.json`

```json
{
    "name": "movie-streaming-backend",
    "version": "1.0.0",
    "description": "Backend for movie streaming service",
    "main": "dist/app.js",
    "scripts": {
        "start": "npm run build && node dist/app.js",
        "dev": "nodemon --exec ts-node src/app.ts",
        "build": "tsc -p tsconfig.json",
        "clean": "rm -rf dist",
        "lint": "eslint . --ext .ts"
    },
    "dependencies": {
        "aws-sdk": "^2.1692.0",
        "cors": "^2.8.5",
        "dotenv": "^16.4.5",
        "express": "^4.18.2",
        "mongoose": "^8.8.3",
        "multer": "^1.4.5-lts.1",
        "zod": "^3.22.2"
    },
    "devDependencies": {
        "@types/cors": "^2.8.13",
        "@types/express": "^4.17.17",
        "@types/multer": "^1.4.7",
        "@types/node": "^20.17.6",
        "@typescript-eslint/eslint-plugin": "^6.4.1",
        "@typescript-eslint/parser": "^6.4.1",
        "eslint": "^8.47.0",
        "nodemon": "^3.0.1",
        "ts-node": "^10.9.2",
        "typescript": "^5.1.6"
    }
}
```

---

## <a id='scripts-uploadJoker.ts'></a>File: scripts/uploadJoker.ts
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/scripts/uploadJoker.ts`

```typescript
// scripts/uploadJoker.ts
import dotenv from 'dotenv';
import fs from 'fs';
import path from 'path';
import mongoose from 'mongoose';
import { Movie } from '../src/models/movie.model';
import { storageService } from '../src/services/storage.service';
import https from 'https';

dotenv.config();

// Direct MP4 URL của trailer Joker 2 (thay bằng URL thực của bạn)
const TRAILER_URL = 'https://drft.nmnm.store/tunnel?id=TnJSpMudpFzWZxFRGOF1F&exp=1731665358688&sig=r42rswBzzV_eQ3su1nfYaWb2dBEQtcqWNuAKYwy5ys4&sec=v_nbA2e_cgIkxsGkf8miT7OQkyzy93hR9J4rKfTtI6Y&iv=JFREyc6FIXGslqQk8h8pXA';

async function downloadFile(url: string, destination: string): Promise<void> {
    return new Promise((resolve, reject) => {
        const file = fs.createWriteStream(destination);

        console.log('Starting download from:', url);
        const request = https.get(url, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            }
        }, (response) => {
            if (response.statusCode !== 200) {
                reject(new Error(`Failed to download: ${response.statusCode}`));
                return;
            }

            const contentLength = parseInt(response.headers['content-length'] || '0', 10);
            let downloaded = 0;

            response.on('data', (chunk) => {
                downloaded += chunk.length;
                if (contentLength) {
                    const percent = (downloaded / contentLength * 100).toFixed(2);
                    process.stdout.write(`Downloading... ${percent}%\r`);
                }
            });

            response.pipe(file);

            file.on('finish', () => {
                process.stdout.write('\n');
                file.close();
                resolve();
            });
        });

        request.on('error', (err) => {
            fs.unlink(destination, () => { });
            reject(err);
        });

        file.on('error', (err) => {
            fs.unlink(destination, () => { });
            reject(err);
        });
    });
}

async function uploadJokerMovie() {
    const trailerPath = path.join(process.cwd(), 'joker_trailer.mp4');

    try {
        // 1. Connect to MongoDB
        await mongoose.connect('mongodb://localhost:27017/movie-streaming');
        console.log('✅ Connected to MongoDB');

        // 2. Download trailer
        console.log('Downloading trailer...');
        await downloadFile(TRAILER_URL, trailerPath);
        console.log('✅ Trailer downloaded successfully');

        // Get file size
        const stats = fs.statSync(trailerPath);
        console.log(`File size: ${(stats.size / (1024 * 1024)).toFixed(2)} MB`);

        // 3. Read and upload the video
        console.log('Reading video file...');
        const videoBuffer = fs.readFileSync(trailerPath);
        const videoKey = `videos/joker-2-${Date.now()}.mp4`;

        // Ensure uploads directory exists
        const uploadDir = path.join(process.cwd(), 'uploads', 'videos');
        if (!fs.existsSync(uploadDir)) {
            fs.mkdirSync(uploadDir, { recursive: true });
        }

        console.log('Uploading to storage...');
        await storageService.uploadFile(videoKey, videoBuffer);
        console.log('✅ Video uploaded:', videoKey);

        // 4. Create movie document
        console.log('Creating movie record...');
        const movie = await Movie.create({
            title: "Joker: Folie à Deux",
            originalTitle: "Joker 2",
            description: `From writer-director Todd Phillips, "Joker: Folie à Deux" stars Oscar winners Joaquin Phoenix and Lady Gaga. The film opens in theaters October 4, 2024.
            
            In this musical psychological thriller sequel to 2019's 'Joker', Arthur Fleck's story continues as he meets Harley Quinn at Arkham Asylum. The film explores their complex relationship through music and madness in a dark reimagining of Gotham City.`,
            videoUrl: videoKey,
            duration: 138, // 2h 18m
            thumbnail: "https://www.themoviedb.org/t/p/original/sFxOUeS0Ucg2BTDHAymXVXYqYTN.jpg",
            genre: ["Crime", "Thriller", "Drama", "Musical"],
            rating: 8.5,
            year: 2024,
            country: "United States",
            director: "Todd Phillips",
            cast: [
                {
                    name: "Joaquin Phoenix",
                    character: "Arthur Fleck / Joker",
                    image: "https://www.themoviedb.org/t/p/w500/zq2PV8hzebT3XJW3CN3YLHLCbrM.jpg"
                },
                {
                    name: "Lady Gaga",
                    character: "Harleen Quinzel / Harley Quinn",
                    image: "https://www.themoviedb.org/t/p/w500/oqqO6J0oI90K80JqUVi8WYjwjT.jpg"
                },
                {
                    name: "Zazie Beetz",
                    character: "Sophie Dumond",
                    image: "https://www.themoviedb.org/t/p/w500/sgRVLyJ1UMDECXHsVmfVyZJ2Yti.jpg"
                }
            ],
            status: "Coming Soon",
            views: 0,
            releaseDate: "2024-10-04"
        });

        console.log('✅ Movie created in database');
        console.log('\nMovie Details:');
        console.log('ID:', movie._id);
        console.log('Title:', movie.title);
        console.log('Video Path:', storageService.getFilePath(videoKey));

        // 5. Verify everything
        const finalPath = storageService.getFilePath(videoKey);
        const exists = fs.existsSync(finalPath);
        console.log('\nVerification:');
        console.log('Database Record:', !!movie ? '✅' : '❌');
        console.log('Video File Exists:', exists ? '✅' : '❌');
        console.log('Video File Size:', (fs.statSync(finalPath).size / (1024 * 1024)).toFixed(2), 'MB');

        // 6. Display test URLs
        console.log('\nTest URLs:');
        console.log(`API URL: http://localhost:3000/api/movies/${movie._id}`);
        console.log(`Stream URL: http://localhost:3000/api/movies/${movie._id}/stream`);
        console.log(`Frontend URL: http://localhost:8080/watch/${movie._id}`);

    } catch (error) {
        console.error('Error:', error);
    } finally {
        // Cleanup
        if (fs.existsSync(trailerPath)) {
            fs.unlinkSync(trailerPath);
            console.log('\nTemporary files cleaned up');
        }

        await mongoose.disconnect();
        console.log('Disconnected from MongoDB');
    }
}

console.log('Starting Joker movie upload process...');
uploadJokerMovie().then(() => {
    console.log('✨ Process completed successfully');
}).catch(error => {
    console.error('❌ Process failed:', error);
    process.exit(1);
});
```

---

## <a id='scripts-uploadSample.ts'></a>File: scripts/uploadSample.ts
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/scripts/uploadSample.ts`

```typescript
// scripts/uploadSample.ts
import dotenv from 'dotenv';
import fs from 'fs';
import path from 'path';
import mongoose from 'mongoose';
import { Movie } from '../src/models/movie.model';
import { storageService } from '../src/services/storage.service';

dotenv.config();

async function uploadSampleMovie() {
    try {
        // 1. Connect to MongoDB
        await mongoose.connect('mongodb://localhost:27017/movie-streaming', {
            useNewUrlParser: true,
            useUnifiedTopology: true
        } as mongoose.ConnectOptions);
        console.log('✅ Connected to MongoDB');

        // 2. Read sample video file
        const videoPath = path.join(__dirname, 'sample.mp4');
        console.log('Reading video file from:', videoPath);

        if (!fs.existsSync(videoPath)) {
            throw new Error('Sample video file not found. Please download it first.');
        }

        const videoBuffer = fs.readFileSync(videoPath);
        console.log('✅ Video file read successfully');

        // 3. Ensure upload directory exists
        const uploadDir = path.join(__dirname, '../uploads/videos');
        if (!fs.existsSync(uploadDir)) {
            fs.mkdirSync(uploadDir, { recursive: true });
            console.log('Created uploads directory:', uploadDir);
        }

        // 4. Upload video to storage
        const videoKey = `videos/bigbuckbunny-${Date.now()}.mp4`;
        await storageService.uploadFile(videoKey, videoBuffer);
        console.log('✅ Video uploaded to storage:', videoKey);

        // 5. Create movie document
        const movieData = {
            title: "Big Buck Bunny",
            originalTitle: "Big Buck Bunny (2008)",
            description: `Big Buck Bunny tells the story of a giant rabbit with a heart bigger than himself. 
                         When one sunny day three rodents rudely harass him, something snaps... 
                         and the rabbit ain't no bunny anymore! In the typical cartoon tradition 
                         he prepares the nasty rodents a comical revenge.`,
            videoUrl: videoKey,
            duration: 596, // 9:56 in seconds
            thumbnail: "https://upload.wikimedia.org/wikipedia/commons/c/c5/Big_buck_bunny_poster_big.jpg",
            genre: ["Animation", "Short", "Comedy"],
            rating: 7.8,
            year: 2008,
            country: "Netherlands",
            director: "Sacha Goedegebure",
            cast: [
                {
                    name: "Sacha Goedegebure",
                    character: "Director",
                    image: "https://via.placeholder.com/150?text=Sacha+Goedegebure"
                },
                {
                    name: "Jan Morgenstern",
                    character: "Music Composer",
                    image: "https://via.placeholder.com/150?text=Jan+Morgenstern"
                }
            ],
            status: "Released",
            views: 12500,
            releaseDate: "2008-04-10"
        };

        const movie = await Movie.create(movieData);
        console.log('✅ Movie created in database:', movie._id);

        // 6. Verify everything
        const savedMovie = await Movie.findById(movie._id);
        const videoExists = fs.existsSync(storageService.getFilePath(savedMovie!.videoUrl));

        console.log('\nVerification Results:');
        console.log('Database Record:', !!savedMovie ? '✅' : '❌');
        console.log('Video File:', videoExists ? '✅' : '❌');
        console.log('\nMovie Details:');
        console.log('- ID:', savedMovie?._id);
        console.log('- Title:', savedMovie?.title);
        console.log('- Video Path:', storageService.getFilePath(savedMovie!.videoUrl));
        console.log('- Duration:', savedMovie?.duration, 'seconds');

    } catch (error: any) {
        console.error('❌ Error:', error.message);
        console.error('Stack:', error.stack);
    } finally {
        await mongoose.disconnect();
        console.log('📡 Disconnected from MongoDB');
    }
}

// Run the upload
console.log('🚀 Starting sample movie upload...');
uploadSampleMovie().then(() => {
    console.log('✨ Upload process completed');
}).catch(error => {
    console.error('❌ Upload process failed:', error);
    process.exit(1);
});
```

---

## <a id='scripts-uploadSampleTwo.ts'></a>File: scripts/uploadSampleTwo.ts
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/scripts/uploadSampleTwo.ts`

```typescript
// scripts/uploadSampleTwo.ts
import dotenv from 'dotenv';
import fs from 'fs';
import path from 'path';
import mongoose from 'mongoose';
import { Movie } from '../src/models/movie.model';
import { storageService } from '../src/services/storage.service';

dotenv.config();

async function uploadSampleMovie() {
    try {
        // 1. Connect to MongoDB
        await mongoose.connect('mongodb://localhost:27017/movie-streaming', {
            useNewUrlParser: true,
            useUnifiedTopology: true
        } as mongoose.ConnectOptions);
        console.log('✅ Connected to MongoDB');

        // 2. Read sample video file
        const videoPath = path.join(__dirname, 'sample-short.mp4');
        console.log('Reading video file from:', videoPath);

        if (!fs.existsSync(videoPath)) {
            throw new Error('Sample video file not found. Please add sample-short.mp4 to scripts folder.');
        }

        const videoBuffer = fs.readFileSync(videoPath);
        console.log('✅ Video file read successfully');

        // 3. Ensure upload directory exists
        const uploadDir = path.join(__dirname, '../uploads/videos');
        if (!fs.existsSync(uploadDir)) {
            fs.mkdirSync(uploadDir, { recursive: true });
            console.log('Created uploads directory:', uploadDir);
        }

        // 4. Upload video to storage
        const videoKey = `videos/sample-short-${Date.now()}.mp4`;
        await storageService.uploadFile(videoKey, videoBuffer);
        console.log('✅ Video uploaded to storage:', videoKey);

        // 5. Create movie document
        const movieData = {
            title: "Sample Short Movie",
            originalTitle: "Sample Short Movie (2024)",
            description: "A very short sample movie for testing streaming functionality.",
            videoUrl: videoKey,
            duration: 30, // 30 seconds
            thumbnail: "https://via.placeholder.com/300x450?text=Sample+Short+Movie",
            genre: ["Test", "Sample"],
            rating: 5.0,
            year: 2024,
            country: "Vietnam",
            director: "Test Director",
            cast: [
                {
                    name: "Test Actor",
                    character: "Main Character",
                    image: "https://via.placeholder.com/150?text=Test+Actor"
                }
            ],
            status: "Released",
            views: 100,
            releaseDate: "2024-03-15"
        };

        const movie = await Movie.create(movieData);
        console.log('✅ Movie created in database:', movie._id);

        // 6. Verify everything
        const savedMovie = await Movie.findById(movie._id);
        const videoExists = fs.existsSync(storageService.getFilePath(savedMovie!.videoUrl));

        console.log('\nVerification Results:');
        console.log('Database Record:', !!savedMovie ? '✅' : '❌');
        console.log('Video File:', videoExists ? '✅' : '❌');
        console.log('\nMovie Details:');
        console.log('- ID:', savedMovie?._id);
        console.log('- Title:', savedMovie?.title);
        console.log('- Video Path:', storageService.getFilePath(savedMovie!.videoUrl));
        console.log('- Duration:', savedMovie?.duration, 'seconds');

    } catch (error: any) {
        console.error('❌ Error:', error.message);
        console.error('Stack:', error.stack);
    } finally {
        await mongoose.disconnect();
        console.log('📡 Disconnected from MongoDB');
    }
}

// Run the upload
console.log('🚀 Starting sample movie upload...');
uploadSampleMovie().then(() => {
    console.log('✨ Upload process completed');
}).catch(error => {
    console.error('❌ Upload process failed:', error);
    process.exit(1);
});
```

---

## <a id='src-app.ts'></a>File: src/app.ts
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/src/app.ts`

```typescript
// src/app.ts
import express from 'express';
import cors from 'cors';
import { config } from './config/environment';
import { connectDB } from './config/database';
import movieRoutes from './routes/movie.routes';
import { errorHandler } from './middlewares/error.middleware';

const app = express();

// Middleware
app.use(cors({
    // Allow both HTTP and HTTPS variants
    origin: [
        'http://52.77.213.249',
        'http://52.77.213.249:8080',
        'http://localhost:8080',
        'http://localhost:3000'
    ],
    // More explicit methods
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'HEAD', 'PATCH'],
    // Include all necessary headers
    allowedHeaders: [
        'Content-Type',
        'Authorization',
        'X-Requested-With',
        'Accept',
        'Origin'
    ],
    // Additional CORS options for robustness
    credentials: true,
    exposedHeaders: ['Content-Length', 'Content-Range'],
    maxAge: 86400 // 24 hours
}));

// Add a pre-flight OPTIONS handler for all routes
app.options('*', cors());

app.use(express.json());

// Health check endpoint
app.get('/health', (_req, res) => {
    res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

// Routes
app.use('/api/movies', movieRoutes);

// Error handling
app.use(errorHandler);

// Server startup
const start = async () => {
    try {
        await connectDB();
        app.listen(config.port, () => {
            console.log(`Server running on port ${config.port}`);
        });
    } catch (error) {
        console.error('Failed to start server:', error);
        process.exit(1);
    }
};

start();
```

---

## <a id='src-config-database.ts'></a>File: src/config/database.ts
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/src/config/database.ts`

```typescript
// src/config/database.ts
import mongoose from 'mongoose';
import { config } from './environment';

export const connectDB = async () => {
    try {
        await mongoose.connect(config.mongoose.url);
        console.log('✅ Connected to MongoDB');

        mongoose.connection.on('error', (err) => {
            console.error('MongoDB connection error:', err);
        });

        mongoose.connection.on('disconnected', () => {
            console.log('MongoDB disconnected');
        });

    } catch (error) {
        console.error('❌ MongoDB connection error:', error);
        process.exit(1);
    }
};

export const closeDB = async () => {
    try {
        await mongoose.connection.close();
        console.log('MongoDB connection closed');
    } catch (error) {
        console.error('Error closing MongoDB connection:', error);
        process.exit(1);
    }
};
```

---

## <a id='src-config-environment.ts'></a>File: src/config/environment.ts
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/src/config/environment.ts`

```typescript
import dotenv from 'dotenv';
import { z } from 'zod';

dotenv.config();

const envSchema = z.object({
    NODE_ENV: z.enum(['development', 'production', 'test']).default('development'),
    PORT: z.string().default('3000'),
    MONGODB_LOCAL_URI: z.string().default('mongodb://mongodb:27017/movie-streaming'),
    USE_LOCAL_STORAGE: z.string().default('true'),
    LOCAL_STORAGE_PATH: z.string().default('./uploads'),
});

const envVars = envSchema.parse(process.env);

export const config = {
    env: envVars.NODE_ENV,
    port: parseInt(envVars.PORT, 10),
    useLocalStorage: envVars.USE_LOCAL_STORAGE === 'true',
    localStoragePath: envVars.LOCAL_STORAGE_PATH,
    mongoose: {
        url: envVars.MONGODB_LOCAL_URI,
        options: {
            useNewUrlParser: true,
            useUnifiedTopology: true,
            serverSelectionTimeoutMS: 5000,
            // Thêm retry và timeout để xử lý kết nối tốt hơn
            retryWrites: true,
            w: 'majority'
        }
    }
};
```

---

## <a id='src-controllers-movie.controller.ts'></a>File: src/controllers/movie.controller.ts
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/src/controllers/movie.controller.ts`

```typescript
// src/controllers/movie.controller.ts
import { Request, Response } from 'express';
import { Movie } from '../models/movie.model';
import { storageService } from '../services/storage.service';
import { asyncHandler } from '../utils/asyncHandler';
import path from 'path';

export const getMovies = asyncHandler(async (_req: Request, res: Response) => {
    const movies = await Movie.find()
        .select('title description thumbnail duration')
        .sort({ createdAt: -1 });

    res.json({
        status: 'success',
        data: movies
    });
});

export const getMovie = asyncHandler(async (req: Request, res: Response) => {
    const movie = await Movie.findById(req.params.id);

    if (!movie) {
        return res.status(404).json({
            status: 'error',
            message: 'Movie not found'
        });
    }

    res.json({
        status: 'success',
        data: movie
    });
});

export const createMovie = asyncHandler(async (req: Request, res: Response) => {
    const { title, description, duration } = req.body;
    const videoFile = req.file;

    if (!videoFile) {
        return res.status(400).json({
            status: 'error',
            message: 'Video file is required'
        });
    }

    const filename = `videos/${Date.now()}-${path.basename(videoFile.originalname)}`;
    await storageService.uploadFile(filename, videoFile.buffer);

    const movie = await Movie.create({
        title,
        description,
        duration: parseInt(duration),
        videoUrl: filename,
        thumbnail: `https://via.placeholder.com/300x450?text=${encodeURIComponent(title)}`
    });

    res.status(201).json({
        status: 'success',
        data: movie
    });
});
```

---

## <a id='src-controllers-stream.controller.ts'></a>File: src/controllers/stream.controller.ts
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/src/controllers/stream.controller.ts`

```typescript
// src/controllers/stream.controller.ts
import { Request, Response } from 'express';
import { Movie } from '../models/movie.model';
import { asyncHandler } from '../utils/asyncHandler';
import fs from 'fs';
import path from 'path';

export const streamVideo = asyncHandler(async (req: Request, res: Response) => {
    const { id } = req.params;

    const movie = await Movie.findById(id);
    if (!movie) {
        return res.status(404).json({ message: 'Movie not found' });
    }

    const videoPath = path.join(process.cwd(), 'uploads', movie.videoUrl);

    if (!fs.existsSync(videoPath)) {
        return res.status(404).json({ message: 'Video file not found' });
    }

    const stat = fs.statSync(videoPath);
    const fileSize = stat.size;
    const range = req.headers.range;

    if (range) {
        const parts = range.replace(/bytes=/, "").split("-");
        const start = parseInt(parts[0], 10);
        const end = parts[1] ? parseInt(parts[1], 10) : Math.min(start + 1024 * 1024, fileSize - 1);
        const chunksize = (end - start) + 1;

        if (start >= fileSize || end >= fileSize) {
            res.status(416).send('Requested range not satisfiable');
            return;
        }

        res.writeHead(206, {
            'Content-Range': `bytes ${start}-${end}/${fileSize}`,
            'Accept-Ranges': 'bytes',
            'Content-Length': chunksize,
            'Content-Type': 'video/mp4',
        });

        const stream = fs.createReadStream(videoPath, { start, end });
        stream.pipe(res);
    } else {
        res.writeHead(200, {
            'Content-Length': fileSize,
            'Content-Type': 'video/mp4',
        });
        fs.createReadStream(videoPath).pipe(res);
    }
});
```

---

## <a id='src-middlewares-error.middleware.ts'></a>File: src/middlewares/error.middleware.ts
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/src/middlewares/error.middleware.ts`

```typescript
// src/middlewares/error.middleware.ts
import { Request, Response, NextFunction } from 'express';
import { ApiError } from '../utils/apiError';

export const errorHandler = (
    err: Error | ApiError,
    _req: Request,
    res: Response,
    _next: NextFunction
) => {
    console.error('Error:', err);

    if (err instanceof ApiError) {
        return res.status(err.status).json({
            status: 'error',
            message: err.message
        });
    }

    return res.status(500).json({
        status: 'error',
        message: 'Internal server error'
    });
};
```

---

## <a id='src-models-movie.model.ts'></a>File: src/models/movie.model.ts
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/src/models/movie.model.ts`

```typescript
// src/models/movie.model.ts
import mongoose from 'mongoose';

export interface IMovie {
    title: string;
    description: string;
    videoUrl: string;
    duration: number;
    thumbnail: string;
    originalTitle?: string;
    genre?: string[];
    rating?: number;
    year?: number;
    country?: string;
    director?: string;
    cast?: {
        name: string;
        character: string;
        image?: string;
    }[];
    status?: string;
    views?: number;
    releaseDate?: string;
    createdAt: Date;
    updatedAt: Date;
}

const movieSchema = new mongoose.Schema<IMovie>(
    {
        title: {
            type: String,
            required: true,
            trim: true,
        },
        description: {
            type: String,
            required: true,
        },
        videoUrl: {
            type: String,
            required: true,
        },
        duration: {
            type: Number,
            required: true,
        },
        thumbnail: {
            type: String,
            required: true,
        },
        originalTitle: String,
        genre: [String],
        rating: {
            type: Number,
            min: 0,
            max: 10,
        },
        year: Number,
        country: String,
        director: String,
        cast: [{
            name: String,
            character: String,
            image: String,
        }],
        status: {
            type: String,
            enum: ['Released', 'Coming Soon', 'In Production'],
            default: 'Released'
        },
        views: {
            type: Number,
            default: 0
        },
        releaseDate: String
    },
    { timestamps: true }
);

// Indexes for better query performance
movieSchema.index({ title: 'text' });
movieSchema.index({ createdAt: -1 });
movieSchema.index({ views: -1 });
movieSchema.index({ rating: -1 });
movieSchema.index({ year: -1 });

export const Movie = mongoose.model<IMovie>('Movie', movieSchema);
```

---

## <a id='src-routes-movie.routes.ts'></a>File: src/routes/movie.routes.ts
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/src/routes/movie.routes.ts`

```typescript
// src/routes/movie.routes.ts
import express from 'express';
import multer from 'multer';
import { streamVideo } from '../controllers/stream.controller';
import {
    createMovie,
    getMovies,
    getMovie
} from '../controllers/movie.controller';

const router = express.Router();

// Configure multer for file uploads
const upload = multer({
    storage: multer.memoryStorage(),
    limits: {
        fileSize: 100 * 1024 * 1024, // 100MB limit
    }
});

// Movie routes
router.get('/', getMovies);
router.get('/:id', getMovie);
router.post('/', upload.single('video'), createMovie);
router.get('/:id/stream', streamVideo);

export default router;
```

---

## <a id='src-services-interfaces.ts'></a>File: src/services/interfaces.ts
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/src/services/interfaces.ts`

```typescript
// src/services/interfaces.ts
import { Readable } from 'stream';

export interface IStorageService {
    uploadFile(key: string, file: Buffer): Promise<string>;
    getFileStream(key: string): Readable;
    deleteFile(key: string): Promise<void>;
    getFilePath(key: string): string;
}
```

---

## <a id='src-services-s3.service.ts'></a>File: src/services/s3.service.ts
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/src/services/s3.service.ts`

```typescript
// src/services/s3.service.ts
import AWS from 'aws-sdk';
import { Readable } from 'stream';
import { IStorageService } from './interfaces';

export interface S3Config {
    region: string;
    accessKeyId: string;
    secretAccessKey: string;
    bucketName: string;
}

export class S3StorageService implements IStorageService {
    private s3: AWS.S3;
    private bucket: string;

    constructor(config: S3Config) {
        this.s3 = new AWS.S3({
            region: config.region,
            accessKeyId: config.accessKeyId,
            secretAccessKey: config.secretAccessKey,
        });
        this.bucket = config.bucketName;
    }

    async uploadFile(key: string, file: Buffer): Promise<string> {
        const params = {
            Bucket: this.bucket,
            Key: key,
            Body: file,
        };
        const result = await this.s3.upload(params).promise();
        return result.Location;
    }

    getFileStream(key: string): Readable {
        return this.s3.getObject({
            Bucket: this.bucket,
            Key: key,
        }).createReadStream();
    }

    async deleteFile(key: string): Promise<void> {
        await this.s3.deleteObject({
            Bucket: this.bucket,
            Key: key,
        }).promise();
    }

    getFilePath(key: string): string {
        return `s3://${this.bucket}/${key}`;
    }
}
```

---

## <a id='src-services-storage.service.ts'></a>File: src/services/storage.service.ts
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/src/services/storage.service.ts`

```typescript
// src/services/storage.service.ts
import fs from 'fs';
import path from 'path';
import { Readable } from 'stream';
import { IStorageService } from './interfaces';

class LocalStorageService implements IStorageService {
    private storagePath: string;

    constructor() {
        this.storagePath = path.join(process.cwd(), 'uploads');
        // Ensure directories exist
        if (!fs.existsSync(this.storagePath)) {
            fs.mkdirSync(this.storagePath, { recursive: true });
        }
        const videosPath = path.join(this.storagePath, 'videos');
        if (!fs.existsSync(videosPath)) {
            fs.mkdirSync(videosPath, { recursive: true });
        }
    }

    async uploadFile(key: string, file: Buffer): Promise<string> {
        const filePath = path.join(this.storagePath, key);
        const fileDir = path.dirname(filePath);
        if (!fs.existsSync(fileDir)) {
            fs.mkdirSync(fileDir, { recursive: true });
        }
        await fs.promises.writeFile(filePath, file);
        return key;
    }

    getFileStream(key: string): Readable {
        const filePath = this.getFilePath(key);
        return fs.createReadStream(filePath);
    }

    async deleteFile(key: string): Promise<void> {
        const filePath = this.getFilePath(key);
        await fs.promises.unlink(filePath);
    }

    getFilePath(key: string): string {
        return path.join(this.storagePath, key);
    }
}

export const storageService = new LocalStorageService();
```

---

## <a id='src-utils-apiError.ts'></a>File: src/utils/apiError.ts
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/src/utils/apiError.ts`

```typescript
// src/utils/apiError.ts
export class ApiError extends Error {
    status: number;

    constructor(status: number, message: string) {
        super(message);
        this.status = status;
        Error.captureStackTrace(this, this.constructor);
    }
}
```

---

## <a id='src-utils-asyncHandler.ts'></a>File: src/utils/asyncHandler.ts
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/src/utils/asyncHandler.ts`

```typescript
// src/utils/asyncHandler.ts
import { Request, Response, NextFunction } from 'express';

export const asyncHandler =
    (fn: Function) => (req: Request, res: Response, next: NextFunction) => {
        Promise.resolve(fn(req, res, next)).catch(next);
    };
```

---

## <a id='taskdef.json'></a>File: taskdef.json
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/taskdef.json`

```json
{
  "family": "tthau-mvs-be",
  "networkMode": "awsvpc",
  "requiresCompatibilities": [
    "EC2"
  ],
  "cpu": "256",
  "memory": "512",
  "containerDefinitions": [
    {
      "name": "mvs-be",
      "image": "<IMAGE1_NAME>",
      "essential": true,
      "portMappings": [
        {
          "containerPort": 3000,
          "protocol": "tcp"
        }
      ],
      "logConfiguration": {
        "logDriver": "awslogs",
        "options": {
          "awslogs-group": "/ecs/tthau-mvs",
          "awslogs-region": "ap-southeast-1",
          "awslogs-stream-prefix": "backend"
        }
      }
    }
  ]
}
```

---

## <a id='tsconfig.json'></a>File: tsconfig.json
**Full Path**: `/home/tthau/PROJECT/moviestream/2.backend/tsconfig.json`

```json
{
    "compilerOptions": {
        "target": "es2020",
        "module": "commonjs",
        "outDir": "./dist",
        "rootDir": "./src",
        "strict": true,
        "esModuleInterop": true,
        "skipLibCheck": true,
        "forceConsistentCasingInFileNames": true,
        "moduleResolution": "node",
        "resolveJsonModule": true,
        "isolatedModules": true,
        "baseUrl": ".",
        "paths": {
            "@/*": [
                "src/*"
            ]
        }
    },
    "include": [
        "src/**/*"
    ],
    "exclude": [
        "node_modules",
        "dist"
    ]
}
```

---

## Summary
Total files processed: 41

### Files List:
- .env
- README.md
- dist/app.js
- dist/config/database.js
- dist/config/environment.js
- dist/controllers/movie.controller.js
- dist/controllers/stream.controller.js
- dist/middlewares/error.middleware.js
- dist/models/movie.model.js
- dist/routes/index.js
- dist/routes/movie.routes.js
- dist/services/database.service.js
- dist/services/interfaces.js
- dist/services/movie.service.js
- dist/services/s3.service.js
- dist/services/storage.service.js
- dist/services/stream.service.js
- dist/utils/apiError.js
- dist/utils/asyncHandler.js
- git_push.sh
- migrations/20241204085654-create-movies.js
- migrations/fix-video-urls.js
- package.json
- scripts/uploadJoker.ts
- scripts/uploadSample.ts
- scripts/uploadSampleTwo.ts
- src/app.ts
- src/config/database.ts
- src/config/environment.ts
- src/controllers/movie.controller.ts
- src/controllers/stream.controller.ts
- src/middlewares/error.middleware.ts
- src/models/movie.model.ts
- src/routes/movie.routes.ts
- src/services/interfaces.ts
- src/services/s3.service.ts
- src/services/storage.service.ts
- src/utils/apiError.ts
- src/utils/asyncHandler.ts
- taskdef.json
- tsconfig.json
# Files Concatenation Report

Generated on: 2024-12-09 09:22:52

Source directory: /home/tthau/PROJECT/moviestream/3.local-test
File types: All supported types

---

## Table of Contents

- [docker-compose.yml](#docker-compose.yml)
- [mongo-init.js](#mongo-init.js)
- [sample-data/README.md](#sample-data-README.md)

---

## <a id='docker-compose.yml'></a>File: docker-compose.yml
**Full Path**: `/home/tthau/PROJECT/moviestream/3.local-test/docker-compose.yml`

```yaml
version: '3.8'

services:
  frontend:
    build:
      context: ../1.frontend
      dockerfile: Dockerfile
    container_name: mvs-frontend
    ports:
      - "8080:80"
    environment:
      - REACT_APP_API_URL=http://localhost:3000/api
    depends_on:
      - backend
    networks:
      - mvs-network
    restart: unless-stopped

  backend:
    build:
      context: ../2.backend
      dockerfile: Dockerfile
    container_name: mvs-backend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - MONGODB_LOCAL_URI=mongodb://mongodb:27017/movie-streaming
      - LOCAL_STORAGE_PATH=/app/uploads
      - UPLOAD_MAX_FILE_SIZE=100000000
    volumes:
      - ./sample-data:/app/uploads
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - mvs-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:6
    container_name: mvs-mongodb
    environment:
      - MONGO_DATA_DIR=/data/db
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - mvs-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: unless-stopped

networks:
  mvs-network:
    name: mvs-network
    driver: bridge

volumes:
  mongodb_data:
    name: mvs-mongodb-data

```

---

## <a id='mongo-init.js'></a>File: mongo-init.js
**Full Path**: `/home/tthau/PROJECT/moviestream/3.local-test/mongo-init.js`

```javascript
// Chuyển sang database movie-streaming
db = db.getSiblingDB('movie-streaming');

// Xóa dữ liệu cũ nếu có
db.movies.drop();

// Tạo indexes cho hiệu năng tốt hơn
db.movies.createIndex({ "title": "text" });
db.movies.createIndex({ "createdAt": -1 });
db.movies.createIndex({ "views": -1 });
db.movies.createIndex({ "rating": -1 });

// Mảng chứa dữ liệu mẫu
const sampleMovies = [
    {
        title: "Ocean View",
        originalTitle: "Ocean View (2024)",
        description: "Khám phá vẻ đẹp kỳ diệu của đại dương với những cảnh quay tuyệt đẹp về san hô và sinh vật biển.",
        videoUrl: "videos/ocean-view.mp4",
        duration: 45,
        thumbnail: "https://via.placeholder.com/300x450?text=Ocean+View",
        genre: ["Nature", "Documentary"],
        rating: 4.5,
        year: 2024,
        country: "Vietnam",
        director: "Nguyen Van A",
        cast: [
            {
                name: "Nature",
                character: "Herself",
                image: "https://via.placeholder.com/150?text=Nature"
            }
        ],
        status: "Released",
        views: 1200,
        releaseDate: "2024-01-15",
        createdAt: new Date(),
        updatedAt: new Date()
    },
    {
        title: "Mountain Adventure",
        originalTitle: "Mountain Adventure (2024)",
        description: "Hành trình chinh phục đỉnh núi cao với những thử thách và khung cảnh ngoạn mục.",
        videoUrl: "videos/mountain-scene.mp4",
        duration: 55,
        thumbnail: "https://via.placeholder.com/300x450?text=Mountain+Adventure",
        genre: ["Adventure", "Documentary"],
        rating: 4.8,
        year: 2024,
        country: "Vietnam",
        director: "Nguyen Van B",
        cast: [
            {
                name: "Mountain Explorer",
                character: "Guide",
                image: "https://via.placeholder.com/150?text=Explorer"
            }
        ],
        status: "Released",
        views: 800,
        releaseDate: "2024-02-01",
        createdAt: new Date(),
        updatedAt: new Date()
    }
];

// Insert dữ liệu mẫu
try {
    const result = db.movies.insertMany(sampleMovies);
    print('Inserted sample movies successfully:', result);
} catch (error) {
    print('Error inserting sample movies:', error);
}
```

---

## <a id='sample-data-README.md'></a>File: sample-data/README.md
**Full Path**: `/home/tthau/PROJECT/moviestream/3.local-test/sample-data/README.md`

```markdown
# Sample Data Directory Structure

```
sample-data/
├── videos/
│   ├── ocean-view.mp4        # Video mẫu 1 - cảnh biển
│   ├── mountain-scene.mp4    # Video mẫu 2 - cảnh núi
│   └── city-life.mp4        # Video mẫu 3 - cảnh thành phố
└── README.md

# Yêu cầu với video mẫu:
1. Dung lượng mỗi video nên trong khoảng 5-10MB
2. Thời lượng khoảng 30-60 giây
3. Định dạng MP4 với codec H.264
```

Ghi chú: Vui lòng tải các video mẫu vào thư mục này trước khi chạy docker-compose.
```

---

## Summary
Total files processed: 3

### Files List:
- docker-compose.yml
- mongo-init.js
- sample-data/README.md
# Files Concatenation Report

Generated on: 2024-12-09 09:22:52

Source directory: /home/tthau/PROJECT/moviestream/4.tf-infras
File types: .tf, .tfvars

---

## Table of Contents

- [backend/main.tf](#backend-main.tf)
- [backend/terraform.tfvars](#backend-terraform.tfvars)
- [backend/variables.tf](#backend-variables.tf)
- [environments/dev/main.tf](#environments-dev-main.tf)
- [environments/dev/outputs.tf](#environments-dev-outputs.tf)
- [environments/dev/terraform.tfvars](#environments-dev-terraform.tfvars)
- [environments/dev/variables.tf](#environments-dev-variables.tf)
- [modules/ecr/main.tf](#modules-ecr-main.tf)
- [modules/ecr/outputs.tf](#modules-ecr-outputs.tf)
- [modules/ecr/variables.tf](#modules-ecr-variables.tf)
- [modules/ecs/main.tf](#modules-ecs-main.tf)
- [modules/ecs/outputs.tf](#modules-ecs-outputs.tf)
- [modules/ecs/variables.tf](#modules-ecs-variables.tf)
- [modules/ecs/versions.tf](#modules-ecs-versions.tf)
- [modules/mongodb/main.tf](#modules-mongodb-main.tf)
- [modules/mongodb/outputs.tf](#modules-mongodb-outputs.tf)
- [modules/mongodb/variables.tf](#modules-mongodb-variables.tf)
- [modules/network/main.tf](#modules-network-main.tf)
- [modules/network/outputs.tf](#modules-network-outputs.tf)
- [modules/network/variables.tf](#modules-network-variables.tf)
- [modules/pipeline/main.tf](#modules-pipeline-main.tf)
- [modules/pipeline/outputs.tf](#modules-pipeline-outputs.tf)
- [modules/pipeline/variables.tf](#modules-pipeline-variables.tf)
- [modules/repositories/main.tf](#modules-repositories-main.tf)
- [modules/repositories/outputs.tf](#modules-repositories-outputs.tf)
- [modules/repositories/variables.tf](#modules-repositories-variables.tf)
- [modules/resource-groups/main.tf](#modules-resource-groups-main.tf)
- [modules/resource-groups/outputs.tf](#modules-resource-groups-outputs.tf)
- [modules/resource-groups/variables.tf](#modules-resource-groups-variables.tf)

---

## <a id='backend-main.tf'></a>File: backend/main.tf
**Full Path**: `/home/tthau/PROJECT/moviestream/4.tf-infras/backend/main.tf`

```hcl
# backend/main.tf
provider "aws" {
  region = var.region
  default_tags {
    tags = local.tags
  }
}

resource "aws_s3_bucket" "tf_state" {
  bucket        = "${var.project}-tf-state"
  force_destroy = true
}

resource "aws_s3_bucket_versioning" "tf_state" {
  bucket = aws_s3_bucket.tf_state.id
  versioning_configuration {
    status = "Enabled"
  }
}

resource "aws_dynamodb_table" "tf_locks" {
  name         = "${var.project}-tf-locks"
  billing_mode = "PAY_PER_REQUEST"
  hash_key     = "LockID"
  attribute {
    name = "LockID"
    type = "S"
  }
}

```

---

## <a id='backend-terraform.tfvars'></a>File: backend/terraform.tfvars
**Full Path**: `/home/tthau/PROJECT/moviestream/4.tf-infras/backend/terraform.tfvars`

```hcl
# backend/terraform.tfvars
project = "tthau-mvs"
region  = "ap-south-1"

```

---

## <a id='backend-variables.tf'></a>File: backend/variables.tf
**Full Path**: `/home/tthau/PROJECT/moviestream/4.tf-infras/backend/variables.tf`

```hcl
# backend/variables.tf
variable "project" {
  type = string
}

variable "region" {
  type = string
}

locals {
  tags = {
    Project     = var.project
    Environment = "management"
    Managed_by  = "terraform"
  }
}

```

---

## <a id='environments-dev-main.tf'></a>File: environments/dev/main.tf
**Full Path**: `/home/tthau/PROJECT/moviestream/4.tf-infras/environments/dev/main.tf`

```hcl
# environments/dev/main.tf
terraform {
  backend "s3" {
    bucket         = "tthau-mvs-tf-state"
    key            = "dev/terraform.tfstate"
    region         = "ap-south-1"
    dynamodb_table = "tthau-mvs-tf-locks"
  }

  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region = var.region
  default_tags {
    tags = {
      Project     = var.project
      Environment = var.environment
      Managed_by  = "terraform"
    }
  }
}

# Resource Groups
module "resource_groups" {
  source = "../../modules/resource-groups"

  project     = var.project
  environment = var.environment
}

# Network
module "network" {
  source = "../../modules/network"

  project     = var.project
  environment = var.environment
  vpc_cidr    = "10.0.0.0/16"
}

# ECR Repositories
module "ecr" {
  source = "../../modules/ecr"

  project      = var.project
  environment  = var.environment
  repositories = ["frontend", "backend"]
}

# CodeCommit Repositories
module "repositories" {
  source = "../../modules/repositories"

  project     = var.project
  environment = var.environment

  repositories = {
    frontend = {
      name        = "frontend"
      description = "Frontend React application"
      branch      = "master"
    }
    backend = {
      name        = "backend"
      description = "Backend Node.js API"
      branch      = "master"
    }
  }
}

# ECS Services
module "ecs" {
  source = "../../modules/ecs"

  project            = var.project
  environment        = var.environment
  vpc_id             = module.network.vpc_id
  private_subnet_ids = module.network.private_subnet_ids
  public_subnet_ids  = module.network.public_subnet_ids

  services = {
    frontend = {
      container_image   = "${module.ecr.repository_urls["frontend"]}:latest"
      container_port    = 80
      desired_count     = 1
      health_check_path = "/health"
    }
    backend = {
      container_image   = "${module.ecr.repository_urls["backend"]}:latest"
      container_port    = 3000
      desired_count     = 1
      health_check_path = "/api/health"
    }
  }
}

# MongoDB
module "mongodb" {
  source = "../../modules/mongodb"

  project         = var.project
  environment     = var.environment
  vpc_id          = module.network.vpc_id
  subnet_id       = module.network.private_subnet_ids[0]
  ecs_tasks_sg_id = module.ecs.security_group_ids.ecs_tasks
  key_name        = var.key_name
}

# CI/CD Pipeline
module "pipeline" {
  source = "../../modules/pipeline"

  project          = var.project
  environment      = var.environment
  ecs_cluster_name = module.ecs.cluster_name

  repository_configs = {
    frontend = {
      name           = module.repositories.repository_names["frontend"]
      service_name   = module.ecs.service_names["frontend"]
      ecr_repo_url   = module.ecr.repository_urls["frontend"]
      build_specfile = "buildspec.yml"
    }
    backend = {
      name           = module.repositories.repository_names["backend"]
      service_name   = module.ecs.service_names["backend"]
      ecr_repo_url   = module.ecr.repository_urls["backend"]
      build_specfile = "buildspec.yml"
    }
  }
}

```

---

## <a id='environments-dev-outputs.tf'></a>File: environments/dev/outputs.tf
**Full Path**: `/home/tthau/PROJECT/moviestream/4.tf-infras/environments/dev/outputs.tf`

```hcl
# environments/dev/outputs.tf
output "vpc_id" {
  description = "VPC ID"
  value       = module.network.vpc_id
}

output "private_subnet_ids" {
  description = "Private Subnet IDs"
  value       = module.network.private_subnet_ids
}

output "public_subnet_ids" {
  description = "Public Subnet IDs"
  value       = module.network.public_subnet_ids
}

output "mongodb_private_ip" {
  description = "MongoDB Private IP"
  value       = module.mongodb.mongodb_private_ip
}

output "ecr_repository_urls" {
  description = "ECR Repository URLs"
  value       = module.ecr.repository_urls
}

output "codecommit_repository_urls" {
  description = "CodeCommit Repository URLs"
  value       = module.repositories.repository_urls
}

output "alb_dns_name" {
  description = "Application Load Balancer DNS Name"
  value       = module.ecs.alb_dns_name
}

output "ecs_cluster_name" {
  description = "ECS Cluster Name"
  value       = module.ecs.cluster_name
}

output "ecs_service_names" {
  description = "ECS Service Names"
  value       = module.ecs.service_names
}

output "pipeline_arns" {
  description = "CodePipeline ARNs"
  value       = module.pipeline.pipeline_arns
}

output "resource_group_arns" {
  description = "Resource Group ARNs"
  value       = module.resource_groups.group_arns
}

```

---

## <a id='environments-dev-terraform.tfvars'></a>File: environments/dev/terraform.tfvars
**Full Path**: `/home/tthau/PROJECT/moviestream/4.tf-infras/environments/dev/terraform.tfvars`

```hcl
# environments/dev/terraform.tfvars
project     = "tthau-mvs"
environment = "dev"
region      = "ap-south-1"

key_name = "tthau-ctxlab-key-ap-south-1"

```

---

## <a id='environments-dev-variables.tf'></a>File: environments/dev/variables.tf
**Full Path**: `/home/tthau/PROJECT/moviestream/4.tf-infras/environments/dev/variables.tf`

```hcl
# environments/dev/variables.tf
variable "project" {
  type = string
}

variable "environment" {
  type = string
}

variable "region" {
  type = string
}

variable "key_name" {
  type = string
}

```

---

## <a id='modules-ecr-main.tf'></a>File: modules/ecr/main.tf
**Full Path**: `/home/tthau/PROJECT/moviestream/4.tf-infras/modules/ecr/main.tf`

```hcl
# modules/ecr/main.tf
resource "aws_ecr_repository" "repo" {
  for_each = toset(var.repositories)

  name                 = "${var.project}-${var.environment}-${each.value}"
  image_tag_mutability = "MUTABLE"
  force_delete         = true

  image_scanning_configuration {
    scan_on_push = true
  }

  tags = local.tags
}

resource "aws_ecr_lifecycle_policy" "policy" {
  for_each = aws_ecr_repository.repo

  repository = each.value.name

  policy = jsonencode({
    rules = [
      {
        rulePriority = 1
        description  = "Keep last 5 images"
        selection = {
          tagStatus   = "untagged"
          countType   = "imageCountMoreThan"
          countNumber = 5
        }
        action = {
          type = "expire"
        }
      }
    ]
  })
}

```

---

## <a id='modules-ecr-outputs.tf'></a>File: modules/ecr/outputs.tf
**Full Path**: `/home/tthau/PROJECT/moviestream/4.tf-infras/modules/ecr/outputs.tf`

```hcl
# modules/ecr/outputs.tf
output "repository_urls" {
  value = {
    for name, repo in aws_ecr_repository.repo : name => repo.repository_url
  }
}

output "repository_arns" {
  value = {
    for name, repo in aws_ecr_repository.repo : name => repo.arn
  }
}

```

---

## <a id='modules-ecr-variables.tf'></a>File: modules/ecr/variables.tf
**Full Path**: `/home/tthau/PROJECT/moviestream/4.tf-infras/modules/ecr/variables.tf`

```hcl
# modules/ecr/variables.tf
variable "project" {
  type = string
}

variable "environment" {
  type = string
}

variable "repositories" {
  type    = list(string)
  default = ["frontend", "backend"]
}

locals {
  tags = {
    Project     = var.project
    Environment = var.environment
    Managed_by  = "terraform"
  }
}

```

---

## <a id='modules-ecs-main.tf'></a>File: modules/ecs/main.tf
**Full Path**: `/home/tthau/PROJECT/moviestream/4.tf-infras/modules/ecs/main.tf`

```hcl
# modules/ecs/main.tf
resource "aws_ecs_cluster" "main" {
  name = "${var.project}-${var.environment}-cluster"
  tags = local.tags
}

# Security Groups
resource "aws_security_group" "alb" {
  name        = "${var.project}-${var.environment}-alb-sg"
  description = "ALB Security Group"
  vpc_id      = var.vpc_id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = local.tags
}

resource "aws_security_group" "ecs_tasks" {
  name        = "${var.project}-${var.environment}-ecs-tasks-sg"
  description = "ECS Tasks Security Group"
  vpc_id      = var.vpc_id

  ingress {
    from_port       = 0
    to_port         = 0
    protocol        = "-1"
    security_groups = [aws_security_group.alb.id]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = local.tags
}

# Application Load Balancer
resource "aws_lb" "main" {
  name               = "${var.project}-${var.environment}-alb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.alb.id]
  subnets            = var.public_subnet_ids

  enable_deletion_protection = false

  tags = local.tags
}

resource "aws_lb_listener" "http" {
  load_balancer_arn = aws_lb.main.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    type = "fixed-response"
    fixed_response {
      content_type = "text/plain"
      message_body = "Not Found"
      status_code  = "404"
    }
  }
}

# IAM Roles
resource "aws_iam_role" "task_execution" {
  name = "${var.project}-${var.environment}-task-execution"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "ecs-tasks.amazonaws.com"
        }
      }
    ]
  })

  tags = local.tags
}

resource "aws_iam_role_policy_attachment" "task_execution" {
  role       = aws_iam_role.task_execution.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
}

resource "aws_iam_role" "task_role" {
  name = "${var.project}-${var.environment}-task-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "ecs-tasks.amazonaws.com"
        }
      }
    ]
  })

  tags = local.tags
}

# Target Groups
resource "aws_lb_target_group" "services" {
  for_each = var.services

  name        = "${var.project}-${var.environment}-${each.key}-tg"
  port        = each.value.container_port
  protocol    = "HTTP"
  vpc_id      = var.vpc_id
  target_type = "ip"

  health_check {
    enabled             = true
    healthy_threshold   = 2
    interval            = 30
    matcher             = "200"
    path                = each.value.health_check_path
    timeout             = 5
    unhealthy_threshold = 3
  }

  tags = local.tags
}

# Listener Rules
resource "aws_lb_listener_rule" "services" {
  for_each = var.services

  listener_arn = aws_lb_listener.http.arn

  action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.services[each.key].arn
  }

  condition {
    path_pattern {
      values = each.key == "frontend" ? ["/*"] : ["/api/*"]
    }
  }
}

# ECS Task Definitions
resource "aws_ecs_task_definition" "services" {
  for_each = var.services

  family                   = "${var.project}-${var.environment}-${each.key}"
  requires_compatibilities = ["FARGATE"]
  network_mode             = "awsvpc"
  cpu                      = 256
  memory                   = 512
  execution_role_arn       = aws_iam_role.task_execution.arn
  task_role_arn            = aws_iam_role.task_role.arn

  container_definitions = jsonencode([{
    name      = "${var.project}-${each.key}"
    image     = each.value.container_image
    essential = true
    portMappings = [{
      containerPort = each.value.container_port
      protocol      = "tcp"
    }]
    logConfiguration = {
      logDriver = "awslogs"
      options = {
        "awslogs-group"         = "/ecs/${var.project}-${var.environment}"
        "awslogs-region"        = data.aws_region.current.name
        "awslogs-stream-prefix" = each.key
      }
    }
  }])

  lifecycle {
    prevent_destroy = false
  }

  depends_on = [
    aws_cloudwatch_log_group.ecs_logs
  ]

  tags = local.tags
}

# ECS Services
resource "aws_ecs_service" "services" {
  for_each = var.services

  name            = "${var.project}-${var.environment}-${each.key}"
  cluster         = aws_ecs_cluster.main.id
  task_definition = aws_ecs_task_definition.services[each.key].arn
  desired_count   = each.value.desired_count
  launch_type     = "FARGATE"

  network_configuration {
    subnets          = var.private_subnet_ids
    security_groups  = [aws_security_group.ecs_tasks.id]
    assign_public_ip = false
  }

  load_balancer {
    target_group_arn = aws_lb_target_group.services[each.key].arn
    container_name   = "${var.project}-${each.key}" # Changed from just each.key
    container_port   = each.value.container_port
  }

  depends_on = [aws_lb_listener.http]

  tags = local.tags
}

# Data sources
data "aws_region" "current" {}

# Create CloudWatch Log Group
resource "aws_cloudwatch_log_group" "ecs_logs" {
  name              = "/ecs/${var.project}-${var.environment}"
  retention_in_days = 30

  tags = local.tags
}

```

---

## <a id='modules-ecs-outputs.tf'></a>File: modules/ecs/outputs.tf
**Full Path**: `/home/tthau/PROJECT/moviestream/4.tf-infras/modules/ecs/outputs.tf`

```hcl
# modules/ecs/outputs.tf
output "cluster_id" {
  value = aws_ecs_cluster.main.id
}

output "cluster_name" {
  value = aws_ecs_cluster.main.name
}

output "service_names" {
  value = {
    for k, v in aws_ecs_service.services : k => v.name
  }
}

output "alb_dns_name" {
  value = aws_lb.main.dns_name
}

output "security_group_ids" {
  value = {
    alb       = aws_security_group.alb.id
    ecs_tasks = aws_security_group.ecs_tasks.id
  }
}

```

---

## <a id='modules-ecs-variables.tf'></a>File: modules/ecs/variables.tf
**Full Path**: `/home/tthau/PROJECT/moviestream/4.tf-infras/modules/ecs/variables.tf`

```hcl
# modules/ecs/variables.tf
variable "project" {
  type = string
}

variable "environment" {
  type = string
}

variable "vpc_id" {
  type = string
}

variable "private_subnet_ids" {
  type = list(string)
}

variable "public_subnet_ids" {
  type = list(string)
}

variable "services" {
  type = map(object({
    container_image   = string
    container_port    = number
    desired_count     = number
    health_check_path = string
  }))
}

locals {
  tags = {
    Project     = var.project
    Environment = var.environment
    Managed_by  = "terraform"
  }
}

```

---

## <a id='modules-ecs-versions.tf'></a>File: modules/ecs/versions.tf
**Full Path**: `/home/tthau/PROJECT/moviestream/4.tf-infras/modules/ecs/versions.tf`

```hcl
terraform {
  required_version = ">= 1.0.0"

  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

```

---

## <a id='modules-mongodb-main.tf'></a>File: modules/mongodb/main.tf
**Full Path**: `/home/tthau/PROJECT/moviestream/4.tf-infras/modules/mongodb/main.tf`

```hcl
# modules/mongodb/main.tf
resource "aws_security_group" "mongodb" {
  name        = "${var.project}-${var.environment}-mongodb-sg"
  description = "Security group for MongoDB"
  vpc_id      = var.vpc_id

  ingress {
    from_port       = 27017
    to_port         = 27017
    protocol        = "tcp"
    security_groups = [var.ecs_tasks_sg_id]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = local.tags
}

resource "aws_instance" "mongodb" {
  ami           = data.aws_ami.ubuntu.id # Using data source instead of hardcoded AMI
  instance_type = "t3.medium"
  subnet_id     = var.subnet_id
  key_name      = var.key_name

  vpc_security_group_ids = [aws_security_group.mongodb.id]

  root_block_device {
    volume_size = 20
    volume_type = "gp3"
  }

  user_data = <<-EOF
              #!/bin/bash
              apt-get update && apt-get install -y gnupg
              wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | apt-key add -
              echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/6.0 multiverse" | tee /etc/apt/sources.list.d/mongodb-org-6.0.list
              apt-get update
              apt-get install -y mongodb-org
              systemctl start mongod
              systemctl enable mongod
              EOF

  tags = merge(local.tags, {
    Name = "${var.project}-${var.environment}-mongodb"
  })
}

# Add data source for Ubuntu AMI
data "aws_ami" "ubuntu" {
  most_recent = true

  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  owners = ["099720109477"] # Canonical owner ID
}

```

---

## <a id='modules-mongodb-outputs.tf'></a>File: modules/mongodb/outputs.tf
**Full Path**: `/home/tthau/PROJECT/moviestream/4.tf-infras/modules/mongodb/outputs.tf`

```hcl
# modules/mongodb/outputs.tf
output "mongodb_instance_id" {
  value = aws_instance.mongodb.id
}

output "mongodb_private_ip" {
  value = aws_instance.mongodb.private_ip
}

output "mongodb_security_group_id" {
  value = aws_security_group.mongodb.id
}

```

---

## <a id='modules-mongodb-variables.tf'></a>File: modules/mongodb/variables.tf
**Full Path**: `/home/tthau/PROJECT/moviestream/4.tf-infras/modules/mongodb/variables.tf`

```hcl
# modules/mongodb/variables.tf
variable "project" {
  type = string
}

variable "environment" {
  type = string
}

variable "vpc_id" {
  type = string
}

variable "subnet_id" {
  type = string
}

variable "ecs_tasks_sg_id" {
  type = string
}

variable "key_name" {
  type = string
}

locals {
  tags = {
    Project     = var.project
    Environment = var.environment
    Managed_by  = "terraform"
  }
}

```

---

## <a id='modules-network-main.tf'></a>File: modules/network/main.tf
**Full Path**: `/home/tthau/PROJECT/moviestream/4.tf-infras/modules/network/main.tf`

```hcl
# modules/network/main.tf
data "aws_availability_zones" "available" {
  state = "available"
}

resource "aws_vpc" "main" {
  cidr_block           = var.vpc_cidr
  enable_dns_hostnames = true
  enable_dns_support   = true

  tags = merge(local.tags, {
    Name = "${var.project}-${var.environment}-vpc"
  })
}

resource "aws_internet_gateway" "main" {
  vpc_id = aws_vpc.main.id

  tags = merge(local.tags, {
    Name = "${var.project}-${var.environment}-igw"
  })
}

resource "aws_subnet" "public" {
  count             = 2
  vpc_id            = aws_vpc.main.id
  cidr_block        = cidrsubnet(var.vpc_cidr, 8, count.index)
  availability_zone = data.aws_availability_zones.available.names[count.index]

  map_public_ip_on_launch = true

  tags = merge(local.tags, {
    Name = "${var.project}-${var.environment}-public-${count.index + 1}"
  })
}

resource "aws_subnet" "private" {
  count             = 2
  vpc_id            = aws_vpc.main.id
  cidr_block        = cidrsubnet(var.vpc_cidr, 8, count.index + 2)
  availability_zone = data.aws_availability_zones.available.names[count.index]

  tags = merge(local.tags, {
    Name = "${var.project}-${var.environment}-private-${count.index + 1}"
  })
}

resource "aws_eip" "nat" {
  domain = "vpc"
  tags = merge(local.tags, {
    Name = "${var.project}-${var.environment}-nat-eip"
  })
}

resource "aws_nat_gateway" "main" {
  allocation_id = aws_eip.nat.id
  subnet_id     = aws_subnet.public[0].id

  tags = merge(local.tags, {
    Name = "${var.project}-${var.environment}-nat"
  })
}

resource "aws_route_table" "public" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.main.id
  }

  tags = merge(local.tags, {
    Name = "${var.project}-${var.environment}-public-rt"
  })
}

resource "aws_route_table" "private" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.main.id
  }

  tags = merge(local.tags, {
    Name = "${var.project}-${var.environment}-private-rt"
  })
}

resource "aws_route_table_association" "public" {
  count          = length(aws_subnet.public)
  subnet_id      = aws_subnet.public[count.index].id
  route_table_id = aws_route_table.public.id
}

resource "aws_route_table_association" "private" {
  count          = length(aws_subnet.private)
  subnet_id      = aws_subnet.private[count.index].id
  route_table_id = aws_route_table.private.id
}

```

---

## <a id='modules-network-outputs.tf'></a>File: modules/network/outputs.tf
**Full Path**: `/home/tthau/PROJECT/moviestream/4.tf-infras/modules/network/outputs.tf`

```hcl
# modules/network/outputs.tf
output "vpc_id" {
  value = aws_vpc.main.id
}

output "public_subnet_ids" {
  value = aws_subnet.public[*].id
}

output "private_subnet_ids" {
  value = aws_subnet.private[*].id
}

```

---

## <a id='modules-network-variables.tf'></a>File: modules/network/variables.tf
**Full Path**: `/home/tthau/PROJECT/moviestream/4.tf-infras/modules/network/variables.tf`

```hcl
# modules/network/variables.tf
variable "project" {
  type = string
}

variable "environment" {
  type = string
}

variable "vpc_cidr" {
  type    = string
  default = "10.0.0.0/16"
}

locals {
  tags = {
    Project     = var.project
    Environment = var.environment
    Managed_by  = "terraform"
  }
}

```

---

## <a id='modules-pipeline-main.tf'></a>File: modules/pipeline/main.tf
**Full Path**: `/home/tthau/PROJECT/moviestream/4.tf-infras/modules/pipeline/main.tf`

```hcl
# modules/pipeline/main.tf
data "aws_caller_identity" "current" {}
data "aws_region" "current" {}

# Artifact store
resource "aws_s3_bucket" "artifacts" {
  bucket        = "${var.project}-${var.environment}-pipeline-artifacts"
  force_destroy = true

  tags = local.tags
}

resource "aws_s3_bucket_public_access_block" "artifacts" {
  bucket = aws_s3_bucket.artifacts.id

  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}

# CodeBuild IAM Role
resource "aws_iam_role" "codebuild" {
  name = "${var.project}-${var.environment}-codebuild-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Principal = {
          Service = "codebuild.amazonaws.com"
        }
        Action = "sts:AssumeRole"
      }
    ]
  })

  tags = local.tags
}

resource "aws_iam_role_policy" "codebuild" {
  name = "${var.project}-${var.environment}-codebuild-policy"
  role = aws_iam_role.codebuild.id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ]
        Resource = "*"
      },
      {
        Effect = "Allow"
        Action = [
          "ecr:GetAuthorizationToken",
          "ecr:BatchCheckLayerAvailability",
          "ecr:GetDownloadUrlForLayer",
          "ecr:BatchGetImage",
          "ecr:InitiateLayerUpload",
          "ecr:UploadLayerPart",
          "ecr:CompleteLayerUpload",
          "ecr:PutImage"
        ]
        Resource = "*"
      },
      {
        Effect = "Allow"
        Action = [
          "s3:GetObject",
          "s3:GetObjectVersion",
          "s3:PutObject"
        ]
        Resource = "${aws_s3_bucket.artifacts.arn}/*"
      }
    ]
  })
}

# CodePipeline IAM Role
resource "aws_iam_role" "pipeline" {
  name = "${var.project}-${var.environment}-pipeline-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Principal = {
          Service = "codepipeline.amazonaws.com"
        }
        Action = "sts:AssumeRole"
      }
    ]
  })

  tags = local.tags
}

resource "aws_iam_role_policy" "pipeline" {
  name = "${var.project}-${var.environment}-pipeline-policy"
  role = aws_iam_role.pipeline.id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "codecommit:CancelUploadArchive",
          "codecommit:GetBranch",
          "codecommit:GetCommit",
          "codecommit:GetUploadArchiveStatus",
          "codecommit:UploadArchive",
          "codecommit:GitPull"
        ]
        Resource = "arn:aws:codecommit:${data.aws_region.current.name}:${data.aws_caller_identity.current.account_id}:*"
      },
      {
        Effect = "Allow"
        Action = [
          "codebuild:BatchGetBuilds",
          "codebuild:StartBuild"
        ]
        Resource = "*"
      },
      {
        Effect = "Allow"
        Action = [
          "s3:GetObject",
          "s3:GetObjectVersion",
          "s3:PutObject"
        ]
        Resource = "${aws_s3_bucket.artifacts.arn}/*"
      },
      {
        Effect = "Allow"
        Action = [
          "ecs:*"
        ]
        Resource = "*"
      }
    ]
  })
}

# CodeBuild Projects
resource "aws_codebuild_project" "build" {
  for_each = var.repository_configs

  name         = "${var.project}-${var.environment}-${each.key}"
  service_role = aws_iam_role.codebuild.arn

  artifacts {
    type = "CODEPIPELINE"
  }

  environment {
    compute_type                = "BUILD_GENERAL1_SMALL"
    image                       = "aws/codebuild/amazonlinux2-x86_64-standard:4.0"
    type                        = "LINUX_CONTAINER"
    image_pull_credentials_type = "CODEBUILD"
    privileged_mode             = true

    environment_variable {
      name  = "ECR_REPOSITORY_URL"
      value = each.value.ecr_repo_url
    }
  }

  source {
    type      = "CODEPIPELINE"
    buildspec = each.value.build_specfile
  }

  tags = local.tags
}

# CodePipeline
resource "aws_codepipeline" "pipeline" {
  for_each = var.repository_configs

  name     = "${var.project}-${var.environment}-${each.key}"
  role_arn = aws_iam_role.pipeline.arn

  artifact_store {
    location = aws_s3_bucket.artifacts.bucket
    type     = "S3"
  }

  stage {
    name = "Source"

    action {
      name             = "Source"
      category         = "Source"
      owner            = "AWS"
      provider         = "CodeCommit"
      version          = "1"
      output_artifacts = ["source_output"]

      configuration = {
        RepositoryName = each.value.name
        BranchName     = "master"
      }
    }
  }

  stage {
    name = "Build"

    action {
      name             = "Build"
      category         = "Build"
      owner            = "AWS"
      provider         = "CodeBuild"
      input_artifacts  = ["source_output"]
      version          = "1"
      output_artifacts = ["build_output"] # Add this line

      configuration = {
        ProjectName = aws_codebuild_project.build[each.key].name
      }
    }
  }

  stage {
    name = "Deploy"

    action {
      name            = "Deploy"
      category        = "Deploy"
      owner           = "AWS"
      provider        = "ECS"
      version         = "1"
      input_artifacts = ["build_output"] # Change this to match build stage output

      configuration = {
        ClusterName = var.ecs_cluster_name
        ServiceName = each.value.service_name
        FileName    = "imagedefinitions.json"
      }
    }
  }

  tags = local.tags
}

```

---

## <a id='modules-pipeline-outputs.tf'></a>File: modules/pipeline/outputs.tf
**Full Path**: `/home/tthau/PROJECT/moviestream/4.tf-infras/modules/pipeline/outputs.tf`

```hcl
# modules/pipeline/outputs.tf
output "pipeline_arns" {
  value = {
    for k, v in aws_codepipeline.pipeline : k => v.arn
  }
}

output "codebuild_project_arns" {
  value = {
    for k, v in aws_codebuild_project.build : k => v.arn
  }
}

output "artifact_bucket" {
  value = aws_s3_bucket.artifacts.id
}

```

---

## <a id='modules-pipeline-variables.tf'></a>File: modules/pipeline/variables.tf
**Full Path**: `/home/tthau/PROJECT/moviestream/4.tf-infras/modules/pipeline/variables.tf`

```hcl
# modules/pipeline/variables.tf
variable "project" {
  type = string
}

variable "environment" {
  type = string
}

variable "repository_configs" {
  type = map(object({
    name           = string
    service_name   = string
    ecr_repo_url   = string
    build_specfile = string
  }))
}

variable "ecs_cluster_name" {
  type = string
}

locals {
  tags = {
    Project     = var.project
    Environment = var.environment
    Managed_by  = "terraform"
  }
}

```

---

## <a id='modules-repositories-main.tf'></a>File: modules/repositories/main.tf
**Full Path**: `/home/tthau/PROJECT/moviestream/4.tf-infras/modules/repositories/main.tf`

```hcl
# modules/repositories/main.tf
resource "aws_codecommit_repository" "repos" {
  for_each = var.repositories

  repository_name = "${var.project}-${var.environment}-${each.value.name}"
  description     = each.value.description
  default_branch  = each.value.branch
  tags            = local.tags
}

```

---

## <a id='modules-repositories-outputs.tf'></a>File: modules/repositories/outputs.tf
**Full Path**: `/home/tthau/PROJECT/moviestream/4.tf-infras/modules/repositories/outputs.tf`

```hcl
# modules/repositories/outputs.tf
output "repository_urls" {
  value = {
    for k, v in aws_codecommit_repository.repos : k => {
      http = v.clone_url_http
      ssh  = v.clone_url_ssh
    }
  }
}

output "repository_names" {
  value = {
    for k, v in aws_codecommit_repository.repos : k => v.repository_name
  }
}

output "repository_arns" {
  value = {
    for k, v in aws_codecommit_repository.repos : k => v.arn
  }
}

```

---

## <a id='modules-repositories-variables.tf'></a>File: modules/repositories/variables.tf
**Full Path**: `/home/tthau/PROJECT/moviestream/4.tf-infras/modules/repositories/variables.tf`

```hcl
# modules/repositories/variables.tf
variable "project" {
  type = string
}

variable "environment" {
  type = string
}

variable "repositories" {
  type = map(object({
    name        = string
    description = string
    branch      = string
  }))
}

locals {
  tags = {
    Project     = var.project
    Environment = var.environment
    Managed_by  = "terraform"
  }
}

```

---

## <a id='modules-resource-groups-main.tf'></a>File: modules/resource-groups/main.tf
**Full Path**: `/home/tthau/PROJECT/moviestream/4.tf-infras/modules/resource-groups/main.tf`

```hcl
# modules/resource-groups/main.tf
resource "aws_resourcegroups_group" "app" {
  name        = "${var.project}-${var.environment}-group"
  description = "Resource group for ${var.project} ${var.environment}"

  resource_query {
    query = jsonencode({
      ResourceTypeFilters = ["AWS::AllSupported"]
      TagFilters = [
        {
          Key    = "Project"
          Values = [var.project]
        },
        {
          Key    = "Environment"
          Values = [var.environment]
        }
      ]
    })
  }

  tags = local.tags
}

resource "aws_resourcegroups_group" "compute" {
  name        = "${var.project}-${var.environment}-compute"
  description = "Compute resources"

  resource_query {
    query = jsonencode({
      ResourceTypeFilters = [
        "AWS::ECS::Cluster",
        "AWS::ECS::Service",
        "AWS::ECS::TaskDefinition",
        "AWS::EC2::Instance"
      ]
      TagFilters = [
        {
          Key    = "Project"
          Values = [var.project]
        },
        {
          Key    = "Environment"
          Values = [var.environment]
        }
      ]
    })
  }

  tags = local.tags
}

resource "aws_resourcegroups_group" "network" {
  name        = "${var.project}-${var.environment}-network"
  description = "Network resources"

  resource_query {
    query = jsonencode({
      ResourceTypeFilters = [
        "AWS::EC2::VPC",
        "AWS::EC2::Subnet",
        "AWS::EC2::SecurityGroup",
        "AWS::ElasticLoadBalancingV2::LoadBalancer"
      ]
      TagFilters = [
        {
          Key    = "Project"
          Values = [var.project]
        },
        {
          Key    = "Environment"
          Values = [var.environment]
        }
      ]
    })
  }

  tags = local.tags
}

```

---

## <a id='modules-resource-groups-outputs.tf'></a>File: modules/resource-groups/outputs.tf
**Full Path**: `/home/tthau/PROJECT/moviestream/4.tf-infras/modules/resource-groups/outputs.tf`

```hcl
# modules/resource-groups/outputs.tf
output "group_arns" {
  value = {
    app     = aws_resourcegroups_group.app.arn
    compute = aws_resourcegroups_group.compute.arn
    network = aws_resourcegroups_group.network.arn
  }
}

```

---

## <a id='modules-resource-groups-variables.tf'></a>File: modules/resource-groups/variables.tf
**Full Path**: `/home/tthau/PROJECT/moviestream/4.tf-infras/modules/resource-groups/variables.tf`

```hcl
# modules/resource-groups/variables.tf
variable "project" {
  type = string
}

variable "environment" {
  type = string
}

locals {
  tags = {
    Project     = var.project
    Environment = var.environment
    Managed_by  = "terraform"
  }
}

```

---

## Summary
Total files processed: 29

### Files List:
- backend/main.tf
- backend/terraform.tfvars
- backend/variables.tf
- environments/dev/main.tf
- environments/dev/outputs.tf
- environments/dev/terraform.tfvars
- environments/dev/variables.tf
- modules/ecr/main.tf
- modules/ecr/outputs.tf
- modules/ecr/variables.tf
- modules/ecs/main.tf
- modules/ecs/outputs.tf
- modules/ecs/variables.tf
- modules/ecs/versions.tf
- modules/mongodb/main.tf
- modules/mongodb/outputs.tf
- modules/mongodb/variables.tf
- modules/network/main.tf
- modules/network/outputs.tf
- modules/network/variables.tf
- modules/pipeline/main.tf
- modules/pipeline/outputs.tf
- modules/pipeline/variables.tf
- modules/repositories/main.tf
- modules/repositories/outputs.tf
- modules/repositories/variables.tf
- modules/resource-groups/main.tf
- modules/resource-groups/outputs.tf
- modules/resource-groups/variables.tf
